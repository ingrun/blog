{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wx.png","path":"images/wx.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/zfb.jpg","path":"images/zfb.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/tags/index.md","hash":"f416e508e4ecaa147867c1cd667398959879a524","modified":1609752598706},{"_id":"source/_posts/mysql5.7.md","hash":"669cd293debb629b986e7c3b1b016536e5c17156","modified":1609816515419},{"_id":"source/categories/index.md","hash":"ce98cd88ccf9ad1875a35c9f3da548485de0284f","modified":1609752569680},{"_id":"source/_posts/SpringBoot整合Swagger3生成接口文档.md","hash":"bd9d8d3479c3ac159c4696e3431310f9fb44b849","modified":1610617697569},{"_id":"source/_posts/token.md","hash":"c3ef2065bd0a47f631ba5af12127d2fe42bbacdb","modified":1609825942099},{"_id":"source/_posts/python 单例模式.md","hash":"294da552fff2e7af87c88419e8200e011595aadb","modified":1609825919714},{"_id":"source/_posts/spring-boot.md","hash":"7c1ba311b4b4f60c7e4198a32529e79bb59b714d","modified":1609825932518},{"_id":"source/_posts/vue 监听键盘回车事件.md","hash":"878e40e5168f5a2b0ca5f659004290cd436ca369","modified":1609828643664},{"_id":"source/_posts/常用css.md","hash":"077f82c1e3bb96ce7b9c273c9f6e27f9fb04fb15","modified":1609827179054},{"_id":"source/_posts/vue刷新页面.md","hash":"890237e15b34ffae77bb0b4a39733ad79f87eb3d","modified":1609831558682},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1609813341301},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1609813341295},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1609813341295},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1609813341295},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1609813341301},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1609813341302},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1609813341302},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1609813341343},{"_id":"themes/next/_config.yml","hash":"e05bd207c377c96483f46ce4c60e2dd7500161e6","modified":1609826302471},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1609813341302},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1609813341303},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1609813341311},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1609813341298},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1609813341296},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1609813341296},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1609813341299},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1609813341299},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1609813341300},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1609813341299},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1609813341300},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1609813341301},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1609813341300},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1609813341304},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1609813341300},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1609813341304},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1609813341305},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1609813341305},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1609813341305},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1609813341306},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1609813341306},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1609813341306},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1609813341307},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1609813341311},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1609813341312},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1609813341313},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1609813341313},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1609813341314},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1609813341313},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1609813341314},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1609813341314},{"_id":"themes/next/languages/default.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1609813341313},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1609813341315},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1609813341315},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1609813341314},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1609813341316},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1609813341316},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1609813341315},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1609813341316},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1609813341316},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1609813341317},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1609813341318},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1609813341317},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1609813341318},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1609813341317},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1609813341318},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1609813341341},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1609813341341},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1609813341342},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1609813341350},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1609813341342},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1609813341342},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1609813341342},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1609813341297},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1609813341307},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1609813341297},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1609813341297},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1609813341298},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1609813341308},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1609813341307},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1609813341308},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1609813341308},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1609813341309},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1609813341309},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1609813341309},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1609813341309},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1609813341319},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1609813341310},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1609813341310},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1609813341310},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1609813341319},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1609813341319},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1609813341311},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1609813341323},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1609813341324},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1609813341320},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1609813341320},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1609813341336},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1609813341328},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1609813341338},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1609813341333},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1609813341328},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1609813341338},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1609813341343},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1609813341347},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1609813341328},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1609813341347},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1609813341347},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1609813341347},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1609813341348},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1609813341348},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1609813341349},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1609813341349},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1609813341349},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1609813341350},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1609813341350},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1609813341350},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1609813341351},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1609813341351},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1609813341351},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1609813341330},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1609813341352},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1609813341352},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1609813341352},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1609813341353},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1609813341329},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1609813341353},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1609813341331},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1609813341372},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1609813341384},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1609813341385},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1609813341379},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1609813341385},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1609813341385},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1609813341386},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1609813341380},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1609813341387},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1609813341380},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1609813341380},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1609813341381},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1609813341380},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1609813341382},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1609813341382},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1609813341383},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1609813341382},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1609813341383},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1609813341383},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1609813341383},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1609813341384},{"_id":"themes/next/source/images/wx.png","hash":"675f9bdc1b778b8756472733160010f2e6198ec4","modified":1609825687887},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1609813341321},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1609813341322},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1609813341321},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1609813341321},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1609813341387},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1609813341322},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1609813341322},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1609813341323},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1609813341322},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1609813341324},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1609813341323},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1609813341324},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1609813341325},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1609813341325},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1609813341326},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1609813341327},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1609813341326},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1609813341327},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1609813341327},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1609813341331},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1609813341333},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1609813341332},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1609813341332},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1609813341334},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1609813341334},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1609813341334},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1609813341335},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1609813341335},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1609813341335},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1609813341337},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1609813341337},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1609813341339},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1609813341336},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1609813341336},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1609813341339},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1609813341338},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1609813341340},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1609813341339},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1609813341337},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1609813341339},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1609813341338},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1609813341340},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1609813341340},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1609813341344},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1609813341344},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1609813341330},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1609813341344},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1609813341329},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1609813341345},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1609813341341},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1609813341345},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1609813341330},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1609813341330},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1609813341345},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1609813341345},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1609813341346},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1609813341346},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1609813341346},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1609813341347},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1609813341329},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1609813341378},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1609813341378},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1609813341378},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1609813341379},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1609813341386},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1609813341386},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1609813341379},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1609813341363},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1609813341373},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1609813341364},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1609813341390},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1609813341390},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1609813341367},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1609813341367},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1609813341367},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1609813341369},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1609813341369},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1609813341370},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1609813341370},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1609813341372},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1609813341354},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1609813341354},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1609813341354},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1609813341359},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1609813341374},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1609813341374},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1609813341374},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1609813341376},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1609813341377},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1609813341374},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1609813341377},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1609813341374},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1609813341377},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1609813341377},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1609813341378},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1609813341375},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1609813341375},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1609813341376},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1609813341388},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1609813341376},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1609813341375},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1609813341375},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1609813341362},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1609813341389},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1609813341362},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1609813341362},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1609813341362},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1609813341362},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1609813341361},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1609813341363},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1609813341363},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1609813341364},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1609813341364},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1609813341365},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1609813341364},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1609813341365},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1609813341366},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1609813341368},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1609813341365},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1609813341366},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1609813341366},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1609813341366},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1609813341369},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1609813341368},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1609813341371},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1609813341371},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1609813341369},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1609813341371},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1609813341370},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1609813341371},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1609813341355},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1609813341372},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1609813341372},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1609813341355},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1609813341355},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1609813341356},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1609813341356},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1609813341356},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1609813341355},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1609813341358},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1609813341356},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1609813341357},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1609813341357},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1609813341357},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1609813341358},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1609813341358},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1609813341358},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1609813341359},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1609813341358},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1609813341360},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1609813341360},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1609813341359},{"_id":"themes/next/source/images/zfb.jpg","hash":"a9e4b36b1423aaa7457ff34243e2737ff3ffc729","modified":1609825687807},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1609813341360},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1609813341360},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1609813341361},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1609813341389},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1609813341389},{"_id":"public/search.xml","hash":"7bc56260b3b56ac0a93aa85b8bb1e8b459c47f66","modified":1610617749981},{"_id":"public/tags/index.html","hash":"416f841597cab4344ac18e07c105d17c4d6d5152","modified":1610617749981},{"_id":"public/categories/index.html","hash":"8219dfccde8cc1575497275d7988f65c33dc6a9b","modified":1610617749981},{"_id":"public/2021/01/14/SpringBoot整合Swagger3生成接口文档/index.html","hash":"4858a1ed1cd649c6574060e8222f87e866bc8381","modified":1610617749981},{"_id":"public/2021/01/04/mysql5.7/index.html","hash":"57ea85ba973c9a1b09ffbcc69507909662cf45f8","modified":1610617749981},{"_id":"public/2021/01/02/token/index.html","hash":"fb1225a3ad0fc823d5ebaa4e14e2a2e1c88bb368","modified":1610617749981},{"_id":"public/2021/01/02/python 单例模式/index.html","hash":"ff92a30c10d5ce2c16cd89b6eaa63112245d3c1c","modified":1610617749981},{"_id":"public/2021/01/01/spring-boot/index.html","hash":"5efefbbe4bee7cc24a5857f4e62eb1e3f7654402","modified":1610617749981},{"_id":"public/2020/05/08/vue刷新页面/index.html","hash":"ef860222c925355819b1789ff81600ad8555ed9c","modified":1610617749981},{"_id":"public/2020/03/08/vue 监听键盘回车事件/index.html","hash":"9a69cefd1fb23834faad38f42b9d8d45d2100383","modified":1610617749981},{"_id":"public/2019/03/12/常用css/index.html","hash":"94f9bbce5f4a253fd36a1f1e27446d3a18dc1acf","modified":1610617749981},{"_id":"public/index.html","hash":"c22280892d498ba00cdae664fad10ebff7c61938","modified":1610617749981},{"_id":"public/archives/index.html","hash":"1e5f0afcb8f8ae6b7783fa04b63a8b111ae4609e","modified":1610617749981},{"_id":"public/archives/2019/index.html","hash":"0b38ddb427483c7848efd2f2fa390de56561ceca","modified":1610617749981},{"_id":"public/archives/2019/03/index.html","hash":"ba614b478e48ca111f6bf402ab74c91498f50e91","modified":1610617749981},{"_id":"public/archives/2020/index.html","hash":"49bd4590c4d34d9efd7bfe0b676a27d95d5924c4","modified":1610617749981},{"_id":"public/archives/2020/03/index.html","hash":"a8cc43cfbbd3ba74dd280763112238d4aec69c37","modified":1610617749981},{"_id":"public/archives/2020/05/index.html","hash":"bdaa2a8f587c7af5d724f5ca3f80aefbeed80661","modified":1610617749981},{"_id":"public/archives/2021/index.html","hash":"7334769b43a8bcb0433e1466126f620440459d0e","modified":1610617749981},{"_id":"public/archives/2021/01/index.html","hash":"dbda40e413b46f4f2a97218fafd3ffc8d90a8596","modified":1610617749981},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610617749981},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610617749981},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610617749981},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610617749981},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610617749981},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610617749981},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610617749981},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610617749981},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610617749981},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610617749981},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610617749981},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610617749981},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610617749981},{"_id":"public/images/wx.png","hash":"675f9bdc1b778b8756472733160010f2e6198ec4","modified":1610617749981},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1610617749981},{"_id":"public/images/zfb.jpg","hash":"a9e4b36b1423aaa7457ff34243e2737ff3ffc729","modified":1610617749981},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1610617749981},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1610617749981},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1610617749981},{"_id":"public/css/main.css","hash":"2ce27631d566ea807606e602587ea26136d4d646","modified":1610617749981},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1610617749981},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1610617749981},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1610617749981},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1610617749981},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1610617749981},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610617749981},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1610617749981},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1610617749981},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1610617749981},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610617749981},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1610617749981}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2021-01-04T09:29:40.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-04 17:29:40\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-01-04T09:29:58.706Z","path":"tags/index.html","comments":1,"_id":"ckjwo81yc0000g8tu1plj69wo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-09-14T07:30:30.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-09-14 15:30:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2021-01-04T09:29:29.680Z","path":"categories/index.html","comments":1,"_id":"ckjwo81yh0002g8tuhsvjbqld","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CentOS7 yum方式安装MySQL5.7","_content":"\n\n\n转载至博客：https://www.cnblogs.com/bigbrotherer/p/7241845.html\n\n在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。\n\n### 1 下载并安装MySQL官方的 Yum Repository\n\n```bash\n[root@localhost ~]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n```\n\n 使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。\n\n<!--more-->\n\n```bash\n[root@localhost ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n 之后就开始安装MySQL服务器。\n\n```bash\n[root@localhost ~]# yum -y install mysql-community-server\n```\n\n 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726201927328-459165254.png)\n\n至此MySQL就安装完成了，然后是对MySQL的一些设置。\n\n### 2 MySQL数据库设置\n\n 首先启动MySQL\n\n```bash\n[root@localhost ~]# systemctl start  mysqld.service\n```\n\n 查看MySQL运行状态，运行状态如图：\n\n```bash\n[root@localhost ~]# systemctl status mysqld.service\n```\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202441687-1168874203.png)\n\n 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：\n\n```bash\n[root@localhost ~]# grep \"password\" /var/log/mysqld.log\n```\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202722796-1932560887.png)\n\n 如下命令进入数据库：\n\n```bash\n[root@localhost ~]# mysql -uroot -p\n```\n\n 输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：\n\n```bash\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';\n```\n\n 这里有个问题，新密码设置的时候如果设置的过于简单会报错：\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203136000-1398594667.png)\n\n 原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关：\n\n ![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203904812-1008115240.png)\n\n MySQL完整的初始密码规则可以通过如下命令查看：\n\n```bash\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password_check_user_name    | OFF   |\n| validate_password_dictionary_file    |       |\n| validate_password_length             | 4     |\n| validate_password_mixed_case_count   | 1     |\n| validate_password_number_count       | 1     |\n| validate_password_policy             | LOW   |\n| validate_password_special_char_count | 1     |\n+--------------------------------------+-------+\n7 rows in set (0.01 sec)\n```\n\n\n\n 密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：\n\n```bash\nvalidate_password_length = validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)\n```\n\n \n\n我的是已经修改过的，初始情况下第一个的值是ON，validate_password_length是8。可以通过如下命令修改：\n\n```bash\nmysql> set global validate_password_policy=0;\nmysql> set global validate_password_length=1;\n```\n\n 设置之后就是我上面查出来的那几个值了，此时密码就可以设置的很简单，例如1234之类的。到此数据库的密码设置就完成了。\n\n 但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：\n\n```bash\n[root@localhost ~]# yum -y remove mysql57-community-release-el7-10.noarch\n```\n\n 此时才算真的完成了。\n\n转载至博客：https://www.cnblogs.com/bigbrotherer/p/7241845.html\n\n\n\n\n\n\n\n\n\n\n\n# CentOS7安装mysql5.7（yum）\n\n\n\n安装环境：CentOS7 64位 ，安装MySQL5.7\n\n### 1、配置YUM源\n\n#### 在MySQL官网中下载YUM源rpm安装包：[https://dev.mysql.com/downloads/repo/yum/](https://links.jianshu.com/go?to=https%3A%2F%2Fdev.mysql.com%2Fdownloads%2Frepo%2Fyum%2F)\n\n\n\n```cpp\nwget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n```\n\n#### 安装mysql源\n\n\n\n```css\nyum localinstall mysql57-community-release-el7-8.noarch.rpm\n```\n\n#### 检查mysql源是否安装成功\n\n\n\n```bash\nyum repolist enabled | grep \"mysql.*-community.*\"\n```\n\n![img](https://upload-images.jianshu.io/upload_images/13498144-df07bd235bf5bc35.png?imageMogr2/auto-orient/strip|imageView2/2/w/638/format/webp)\n\n\n\n### 2、安装MySQL\n\n\n\n```undefined\nyum install mysql-community-server\n```\n\n### 3、启动MySQL服务\n\n\n\n```undefined\nsystemctl start mysqld\n```\n\n### 4、开机启动\n\n\n\n```bash\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n\n### 5、修改root本地登录密码\n\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：\n\n\n\n```bash\nset password for 'root'@'localhost'=password('password!'); \n```\n\n![img](https://upload-images.jianshu.io/upload_images/13498144-c1957a4544ef2021.png?imageMogr2/auto-orient/strip|imageView2/2/w/683/format/webp)\n\n### 6、允许远程连接\n\n\n\n```csharp\ngrant all on *.* to root@'%' identified by 'password' with grant option; \nflush privileges;\n```","source":"_posts/mysql5.7.md","raw":"---\ntitle: CentOS7 yum方式安装MySQL5.7\n---\n\n\n\n转载至博客：https://www.cnblogs.com/bigbrotherer/p/7241845.html\n\n在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。\n\n### 1 下载并安装MySQL官方的 Yum Repository\n\n```bash\n[root@localhost ~]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n```\n\n 使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。\n\n<!--more-->\n\n```bash\n[root@localhost ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n 之后就开始安装MySQL服务器。\n\n```bash\n[root@localhost ~]# yum -y install mysql-community-server\n```\n\n 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726201927328-459165254.png)\n\n至此MySQL就安装完成了，然后是对MySQL的一些设置。\n\n### 2 MySQL数据库设置\n\n 首先启动MySQL\n\n```bash\n[root@localhost ~]# systemctl start  mysqld.service\n```\n\n 查看MySQL运行状态，运行状态如图：\n\n```bash\n[root@localhost ~]# systemctl status mysqld.service\n```\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202441687-1168874203.png)\n\n 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：\n\n```bash\n[root@localhost ~]# grep \"password\" /var/log/mysqld.log\n```\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202722796-1932560887.png)\n\n 如下命令进入数据库：\n\n```bash\n[root@localhost ~]# mysql -uroot -p\n```\n\n 输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：\n\n```bash\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';\n```\n\n 这里有个问题，新密码设置的时候如果设置的过于简单会报错：\n\n![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203136000-1398594667.png)\n\n 原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关：\n\n ![img](https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203904812-1008115240.png)\n\n MySQL完整的初始密码规则可以通过如下命令查看：\n\n```bash\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password_check_user_name    | OFF   |\n| validate_password_dictionary_file    |       |\n| validate_password_length             | 4     |\n| validate_password_mixed_case_count   | 1     |\n| validate_password_number_count       | 1     |\n| validate_password_policy             | LOW   |\n| validate_password_special_char_count | 1     |\n+--------------------------------------+-------+\n7 rows in set (0.01 sec)\n```\n\n\n\n 密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：\n\n```bash\nvalidate_password_length = validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)\n```\n\n \n\n我的是已经修改过的，初始情况下第一个的值是ON，validate_password_length是8。可以通过如下命令修改：\n\n```bash\nmysql> set global validate_password_policy=0;\nmysql> set global validate_password_length=1;\n```\n\n 设置之后就是我上面查出来的那几个值了，此时密码就可以设置的很简单，例如1234之类的。到此数据库的密码设置就完成了。\n\n 但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：\n\n```bash\n[root@localhost ~]# yum -y remove mysql57-community-release-el7-10.noarch\n```\n\n 此时才算真的完成了。\n\n转载至博客：https://www.cnblogs.com/bigbrotherer/p/7241845.html\n\n\n\n\n\n\n\n\n\n\n\n# CentOS7安装mysql5.7（yum）\n\n\n\n安装环境：CentOS7 64位 ，安装MySQL5.7\n\n### 1、配置YUM源\n\n#### 在MySQL官网中下载YUM源rpm安装包：[https://dev.mysql.com/downloads/repo/yum/](https://links.jianshu.com/go?to=https%3A%2F%2Fdev.mysql.com%2Fdownloads%2Frepo%2Fyum%2F)\n\n\n\n```cpp\nwget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n```\n\n#### 安装mysql源\n\n\n\n```css\nyum localinstall mysql57-community-release-el7-8.noarch.rpm\n```\n\n#### 检查mysql源是否安装成功\n\n\n\n```bash\nyum repolist enabled | grep \"mysql.*-community.*\"\n```\n\n![img](https://upload-images.jianshu.io/upload_images/13498144-df07bd235bf5bc35.png?imageMogr2/auto-orient/strip|imageView2/2/w/638/format/webp)\n\n\n\n### 2、安装MySQL\n\n\n\n```undefined\nyum install mysql-community-server\n```\n\n### 3、启动MySQL服务\n\n\n\n```undefined\nsystemctl start mysqld\n```\n\n### 4、开机启动\n\n\n\n```bash\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n\n### 5、修改root本地登录密码\n\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：\n\n\n\n```bash\nset password for 'root'@'localhost'=password('password!'); \n```\n\n![img](https://upload-images.jianshu.io/upload_images/13498144-c1957a4544ef2021.png?imageMogr2/auto-orient/strip|imageView2/2/w/683/format/webp)\n\n### 6、允许远程连接\n\n\n\n```csharp\ngrant all on *.* to root@'%' identified by 'password' with grant option; \nflush privileges;\n```","slug":"mysql5.7","published":1,"date":"2021-01-04T09:25:11.769Z","updated":"2021-01-05T03:15:15.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81yf0001g8tu5p9l4h6k","content":"<p>转载至博客：<a href=\"https://www.cnblogs.com/bigbrotherer/p/7241845.html\">https://www.cnblogs.com/bigbrotherer/p/7241845.html</a></p>\n<p>在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p>\n<h3 id=\"1-下载并安装MySQL官方的-Yum-Repository\"><a href=\"#1-下载并安装MySQL官方的-Yum-Repository\" class=\"headerlink\" title=\"1 下载并安装MySQL官方的 Yum Repository\"></a>1 下载并安装MySQL官方的 Yum Repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<p> 使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<p> 之后就开始安装MySQL服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure>\n<p> 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726201927328-459165254.png\" alt=\"img\"></p>\n<p>至此MySQL就安装完成了，然后是对MySQL的一些设置。</p>\n<h3 id=\"2-MySQL数据库设置\"><a href=\"#2-MySQL数据库设置\" class=\"headerlink\" title=\"2 MySQL数据库设置\"></a>2 MySQL数据库设置</h3><p> 首先启动MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start  mysqld.service</span></span><br></pre></td></tr></table></figure>\n<p> 查看MySQL运行状态，运行状态如图：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl status mysqld.service</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202441687-1168874203.png\" alt=\"img\"></p>\n<p> 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202722796-1932560887.png\" alt=\"img\"></p>\n<p> 如下命令进入数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure>\n<p> 输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;new password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错：</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203136000-1398594667.png\" alt=\"img\"></p>\n<p> 原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关：</p>\n<p> <img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203904812-1008115240.png\" alt=\"img\"></p>\n<p> MySQL完整的初始密码规则可以通过如下命令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE <span class=\"string\">&#x27;validate_password%&#x27;</span>;</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| Variable_name                        | Value |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| validate_password_check_user_name    | OFF   |</span><br><span class=\"line\">| validate_password_dictionary_file    |       |</span><br><span class=\"line\">| validate_password_length             | 4     |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 1     |</span><br><span class=\"line\">| validate_password_number_count       | 1     |</span><br><span class=\"line\">| validate_password_policy             | LOW   |</span><br><span class=\"line\">| validate_password_special_char_count | 1     |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">7 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n\n<p> 密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate_password_length = validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</span><br></pre></td></tr></table></figure>\n\n\n<p>我的是已经修改过的，初始情况下第一个的值是ON，validate_password_length是8。可以通过如下命令修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure>\n<p> 设置之后就是我上面查出来的那几个值了，此时密码就可以设置的很简单，例如1234之类的。到此数据库的密码设置就完成了。</p>\n<p> 但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum -y remove mysql57-community-release-el7-10.noarch</span></span><br></pre></td></tr></table></figure>\n<p> 此时才算真的完成了。</p>\n<p>转载至博客：<a href=\"https://www.cnblogs.com/bigbrotherer/p/7241845.html\">https://www.cnblogs.com/bigbrotherer/p/7241845.html</a></p>\n<h1 id=\"CentOS7安装mysql5-7（yum）\"><a href=\"#CentOS7安装mysql5-7（yum）\" class=\"headerlink\" title=\"CentOS7安装mysql5.7（yum）\"></a>CentOS7安装mysql5.7（yum）</h1><p>安装环境：CentOS7 64位 ，安装MySQL5.7</p>\n<h3 id=\"1、配置YUM源\"><a href=\"#1、配置YUM源\" class=\"headerlink\" title=\"1、配置YUM源\"></a>1、配置YUM源</h3><h4 id=\"在MySQL官网中下载YUM源rpm安装包：https-dev-mysql-com-downloads-repo-yum\"><a href=\"#在MySQL官网中下载YUM源rpm安装包：https-dev-mysql-com-downloads-repo-yum\" class=\"headerlink\" title=\"在MySQL官网中下载YUM源rpm安装包：https://dev.mysql.com/downloads/repo/yum/\"></a>在MySQL官网中下载YUM源rpm安装包：<a href=\"https://links.jianshu.com/go?to=https://dev.mysql.com/downloads/repo/yum/\">https://dev.mysql.com/downloads/repo/yum/</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:<span class=\"comment\">//dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装mysql源\"><a href=\"#安装mysql源\" class=\"headerlink\" title=\"安装mysql源\"></a>安装mysql源</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">yum</span> <span class=\"selector-tag\">localinstall</span> <span class=\"selector-tag\">mysql57-community-release-el7-8</span><span class=\"selector-class\">.noarch</span><span class=\"selector-class\">.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"检查mysql源是否安装成功\"><a href=\"#检查mysql源是否安装成功\" class=\"headerlink\" title=\"检查mysql源是否安装成功\"></a>检查mysql源是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13498144-df07bd235bf5bc35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp\" alt=\"img\"></p>\n<h3 id=\"2、安装MySQL\"><a href=\"#2、安装MySQL\" class=\"headerlink\" title=\"2、安装MySQL\"></a>2、安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、启动MySQL服务\"><a href=\"#3、启动MySQL服务\" class=\"headerlink\" title=\"3、启动MySQL服务\"></a>3、启动MySQL服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、开机启动\"><a href=\"#4、开机启动\" class=\"headerlink\" title=\"4、开机启动\"></a>4、开机启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、修改root本地登录密码\"><a href=\"#5、修改root本地登录密码\" class=\"headerlink\" title=\"5、修改root本地登录密码\"></a>5、修改root本地登录密码</h3><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span>=password(<span class=\"string\">&#x27;password!&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13498144-c1957a4544ef2021.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/683/format/webp\" alt=\"img\"></p>\n<h3 id=\"6、允许远程连接\"><a href=\"#6、允许远程连接\" class=\"headerlink\" title=\"6、允许远程连接\"></a>6、允许远程连接</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all <span class=\"keyword\">on</span> *.* to root@<span class=\"string\">&#x27;%&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;password&#x27;</span> <span class=\"keyword\">with</span> grant option; </span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>转载至博客：<a href=\"https://www.cnblogs.com/bigbrotherer/p/7241845.html\">https://www.cnblogs.com/bigbrotherer/p/7241845.html</a></p>\n<p>在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p>\n<h3 id=\"1-下载并安装MySQL官方的-Yum-Repository\"><a href=\"#1-下载并安装MySQL官方的-Yum-Repository\" class=\"headerlink\" title=\"1 下载并安装MySQL官方的 Yum Repository\"></a>1 下载并安装MySQL官方的 Yum Repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<p> 使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<p> 之后就开始安装MySQL服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure>\n<p> 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726201927328-459165254.png\" alt=\"img\"></p>\n<p>至此MySQL就安装完成了，然后是对MySQL的一些设置。</p>\n<h3 id=\"2-MySQL数据库设置\"><a href=\"#2-MySQL数据库设置\" class=\"headerlink\" title=\"2 MySQL数据库设置\"></a>2 MySQL数据库设置</h3><p> 首先启动MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl start  mysqld.service</span></span><br></pre></td></tr></table></figure>\n<p> 查看MySQL运行状态，运行状态如图：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl status mysqld.service</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202441687-1168874203.png\" alt=\"img\"></p>\n<p> 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202722796-1932560887.png\" alt=\"img\"></p>\n<p> 如下命令进入数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure>\n<p> 输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;new password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错：</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203136000-1398594667.png\" alt=\"img\"></p>\n<p> 原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关：</p>\n<p> <img src=\"https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203904812-1008115240.png\" alt=\"img\"></p>\n<p> MySQL完整的初始密码规则可以通过如下命令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE <span class=\"string\">&#x27;validate_password%&#x27;</span>;</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| Variable_name                        | Value |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| validate_password_check_user_name    | OFF   |</span><br><span class=\"line\">| validate_password_dictionary_file    |       |</span><br><span class=\"line\">| validate_password_length             | 4     |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 1     |</span><br><span class=\"line\">| validate_password_number_count       | 1     |</span><br><span class=\"line\">| validate_password_policy             | LOW   |</span><br><span class=\"line\">| validate_password_special_char_count | 1     |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">7 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n\n<p> 密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate_password_length = validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</span><br></pre></td></tr></table></figure>\n\n\n<p>我的是已经修改过的，初始情况下第一个的值是ON，validate_password_length是8。可以通过如下命令修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure>\n<p> 设置之后就是我上面查出来的那几个值了，此时密码就可以设置的很简单，例如1234之类的。到此数据库的密码设置就完成了。</p>\n<p> 但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum -y remove mysql57-community-release-el7-10.noarch</span></span><br></pre></td></tr></table></figure>\n<p> 此时才算真的完成了。</p>\n<p>转载至博客：<a href=\"https://www.cnblogs.com/bigbrotherer/p/7241845.html\">https://www.cnblogs.com/bigbrotherer/p/7241845.html</a></p>\n<h1 id=\"CentOS7安装mysql5-7（yum）\"><a href=\"#CentOS7安装mysql5-7（yum）\" class=\"headerlink\" title=\"CentOS7安装mysql5.7（yum）\"></a>CentOS7安装mysql5.7（yum）</h1><p>安装环境：CentOS7 64位 ，安装MySQL5.7</p>\n<h3 id=\"1、配置YUM源\"><a href=\"#1、配置YUM源\" class=\"headerlink\" title=\"1、配置YUM源\"></a>1、配置YUM源</h3><h4 id=\"在MySQL官网中下载YUM源rpm安装包：https-dev-mysql-com-downloads-repo-yum\"><a href=\"#在MySQL官网中下载YUM源rpm安装包：https-dev-mysql-com-downloads-repo-yum\" class=\"headerlink\" title=\"在MySQL官网中下载YUM源rpm安装包：https://dev.mysql.com/downloads/repo/yum/\"></a>在MySQL官网中下载YUM源rpm安装包：<a href=\"https://links.jianshu.com/go?to=https://dev.mysql.com/downloads/repo/yum/\">https://dev.mysql.com/downloads/repo/yum/</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:<span class=\"comment\">//dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装mysql源\"><a href=\"#安装mysql源\" class=\"headerlink\" title=\"安装mysql源\"></a>安装mysql源</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">yum</span> <span class=\"selector-tag\">localinstall</span> <span class=\"selector-tag\">mysql57-community-release-el7-8</span><span class=\"selector-class\">.noarch</span><span class=\"selector-class\">.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"检查mysql源是否安装成功\"><a href=\"#检查mysql源是否安装成功\" class=\"headerlink\" title=\"检查mysql源是否安装成功\"></a>检查mysql源是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13498144-df07bd235bf5bc35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp\" alt=\"img\"></p>\n<h3 id=\"2、安装MySQL\"><a href=\"#2、安装MySQL\" class=\"headerlink\" title=\"2、安装MySQL\"></a>2、安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、启动MySQL服务\"><a href=\"#3、启动MySQL服务\" class=\"headerlink\" title=\"3、启动MySQL服务\"></a>3、启动MySQL服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、开机启动\"><a href=\"#4、开机启动\" class=\"headerlink\" title=\"4、开机启动\"></a>4、开机启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、修改root本地登录密码\"><a href=\"#5、修改root本地登录密码\" class=\"headerlink\" title=\"5、修改root本地登录密码\"></a>5、修改root本地登录密码</h3><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span>=password(<span class=\"string\">&#x27;password!&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13498144-c1957a4544ef2021.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/683/format/webp\" alt=\"img\"></p>\n<h3 id=\"6、允许远程连接\"><a href=\"#6、允许远程连接\" class=\"headerlink\" title=\"6、允许远程连接\"></a>6、允许远程连接</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all <span class=\"keyword\">on</span> *.* to root@<span class=\"string\">&#x27;%&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;password&#x27;</span> <span class=\"keyword\">with</span> grant option; </span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>"},{"title":"SpringBoot整合Swagger3生成接口文档","date":"2021-01-13T16:00:00.000Z","_content":"\n\n\n前后端分离的项目，接口文档的存在十分重要。与手动编写接口文档不同，swagger是一个自动生成接口文档的工具，在需求不断变更的环境下，手动编写文档的效率实在太低。与swagger2相比新版的swagger3配置更少，使用更加方便。\n\n\n\n## 一、pom文件中引入Swagger3依赖\n\n```xml\n<dependency>\n     <groupId>io.springfox</groupId>\n      <artifactId>springfox-boot-starter</artifactId>\n      <version>3.0.0</version>\n</dependency>\n```\n\n\n\n## 二、Application上面加入@EnableOpenApi注解\n\n```java\n@EnableOpenApi\n@SpringBootApplication\n@MapperScan(basePackages = {\"cn.ruiyeclub.dao\"})\npublic class Swagger3Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Swagger3Application.class, args);\n    }\n}\t\n```\n\n\n\n## 三、Swagger3Config的配置\n\n```java\n@Configuration\npublic class Swagger3Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.OAS_30)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Swagger3接口文档\")\n                .description(\"更多请咨询服务开发者\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n\n\n## 四、Swagger注解的使用说明\n\n```java\n@Api：用在请求的类上，表示对类的说明\n    tags=\"说明该类的作用，可以在UI界面上看到的注解\"\n    value=\"该参数没什么意义，在UI界面上也看到，所以不需要配置\"\n\n@ApiOperation：用在请求的方法上，说明方法的用途、作用\n    value=\"说明方法的用途、作用\"\n    notes=\"方法的备注说明\"\n\n@ApiImplicitParams：用在请求的方法上，表示一组参数说明\n    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面\n        name：参数名\n        value：参数的汉字说明、解释\n        required：参数是否必须传\n        paramType：参数放在哪个地方\n            · header --> 请求参数的获取：@RequestHeader\n            · query --> 请求参数的获取：@RequestParam\n            · path（用于restful接口）--> 请求参数的获取：@PathVariable\n            · div（不常用）\n            · form（不常用）    \n        dataType：参数类型，默认String，其它值dataType=\"Integer\"       \n        defaultValue：参数的默认值\n\n@ApiResponses：用在请求的方法上，表示一组响应\n    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息\n        code：数字，例如400\n        message：信息，例如\"请求参数没填好\"\n        response：抛出异常的类\n\n@ApiModel：用于响应类上，表示一个返回响应数据的信息\n            （这种一般用在post创建的时候，使用@RequestBody这样的场景，\n            请求参数无法使用@ApiImplicitParam注解进行描述的时候）\n    @ApiModelProperty：用在属性上，描述响应类的属性\n```\n\n\n\nController层的配置：\n\n```java\n\n\n@Api( tags = \"活动管理\" )\n@RestController\n@RequestMapping(\"/activity\")\npublic class ActivityController {\n\n    @Resource\n    private ActivityService activityService;\n\n    @ApiOperation(\"获取活动信息\")\n    @GetMapping(\"/get/{id}\")\n    public Object get(@PathVariable String id){\n        return ResponseUtils.success(activityService.get(id));\n    }\n\n    @ApiOperation(\"删除活动信息\")\n    @PostMapping(\"/del/{id}\")\n    public Object del(@PathVariable String id){\n        return ResponseUtils.success(activityService.del(id));\n    }\n\n    @ApiOperation(\"添加活动信息\")\n    @PostMapping(\"/add\")\n    public Object add(@RequestBody Activity activity){\n        return ResponseUtils.success(activityService.add(activity));\n    }\n\n    @ApiOperation(\"修改活动信息\")\n    @PostMapping(\"/upd\")\n    public Object upd(@RequestBody Activity activity){\n        return ResponseUtils.success(activityService.upd(activity));\n    }\n}\n```\n\n\n\n## 五、访问地址\n\n- Swagger的访问路径由port/swagger-ui.html 改成了 port/swagger-ui/ 或 `ip:port/swagger-ui/index.html`\n\n\n\n\n\n\n\n[https://zhuanlan.zhihu.com/p/161947638](https://zhuanlan.zhihu.com/p/161947638)\n\n","source":"_posts/SpringBoot整合Swagger3生成接口文档.md","raw":"---\ntitle: SpringBoot整合Swagger3生成接口文档\ndate: 2021-01-14\n---\n\n\n\n前后端分离的项目，接口文档的存在十分重要。与手动编写接口文档不同，swagger是一个自动生成接口文档的工具，在需求不断变更的环境下，手动编写文档的效率实在太低。与swagger2相比新版的swagger3配置更少，使用更加方便。\n\n\n\n## 一、pom文件中引入Swagger3依赖\n\n```xml\n<dependency>\n     <groupId>io.springfox</groupId>\n      <artifactId>springfox-boot-starter</artifactId>\n      <version>3.0.0</version>\n</dependency>\n```\n\n\n\n## 二、Application上面加入@EnableOpenApi注解\n\n```java\n@EnableOpenApi\n@SpringBootApplication\n@MapperScan(basePackages = {\"cn.ruiyeclub.dao\"})\npublic class Swagger3Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Swagger3Application.class, args);\n    }\n}\t\n```\n\n\n\n## 三、Swagger3Config的配置\n\n```java\n@Configuration\npublic class Swagger3Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.OAS_30)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Swagger3接口文档\")\n                .description(\"更多请咨询服务开发者\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n\n\n## 四、Swagger注解的使用说明\n\n```java\n@Api：用在请求的类上，表示对类的说明\n    tags=\"说明该类的作用，可以在UI界面上看到的注解\"\n    value=\"该参数没什么意义，在UI界面上也看到，所以不需要配置\"\n\n@ApiOperation：用在请求的方法上，说明方法的用途、作用\n    value=\"说明方法的用途、作用\"\n    notes=\"方法的备注说明\"\n\n@ApiImplicitParams：用在请求的方法上，表示一组参数说明\n    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面\n        name：参数名\n        value：参数的汉字说明、解释\n        required：参数是否必须传\n        paramType：参数放在哪个地方\n            · header --> 请求参数的获取：@RequestHeader\n            · query --> 请求参数的获取：@RequestParam\n            · path（用于restful接口）--> 请求参数的获取：@PathVariable\n            · div（不常用）\n            · form（不常用）    \n        dataType：参数类型，默认String，其它值dataType=\"Integer\"       \n        defaultValue：参数的默认值\n\n@ApiResponses：用在请求的方法上，表示一组响应\n    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息\n        code：数字，例如400\n        message：信息，例如\"请求参数没填好\"\n        response：抛出异常的类\n\n@ApiModel：用于响应类上，表示一个返回响应数据的信息\n            （这种一般用在post创建的时候，使用@RequestBody这样的场景，\n            请求参数无法使用@ApiImplicitParam注解进行描述的时候）\n    @ApiModelProperty：用在属性上，描述响应类的属性\n```\n\n\n\nController层的配置：\n\n```java\n\n\n@Api( tags = \"活动管理\" )\n@RestController\n@RequestMapping(\"/activity\")\npublic class ActivityController {\n\n    @Resource\n    private ActivityService activityService;\n\n    @ApiOperation(\"获取活动信息\")\n    @GetMapping(\"/get/{id}\")\n    public Object get(@PathVariable String id){\n        return ResponseUtils.success(activityService.get(id));\n    }\n\n    @ApiOperation(\"删除活动信息\")\n    @PostMapping(\"/del/{id}\")\n    public Object del(@PathVariable String id){\n        return ResponseUtils.success(activityService.del(id));\n    }\n\n    @ApiOperation(\"添加活动信息\")\n    @PostMapping(\"/add\")\n    public Object add(@RequestBody Activity activity){\n        return ResponseUtils.success(activityService.add(activity));\n    }\n\n    @ApiOperation(\"修改活动信息\")\n    @PostMapping(\"/upd\")\n    public Object upd(@RequestBody Activity activity){\n        return ResponseUtils.success(activityService.upd(activity));\n    }\n}\n```\n\n\n\n## 五、访问地址\n\n- Swagger的访问路径由port/swagger-ui.html 改成了 port/swagger-ui/ 或 `ip:port/swagger-ui/index.html`\n\n\n\n\n\n\n\n[https://zhuanlan.zhihu.com/p/161947638](https://zhuanlan.zhihu.com/p/161947638)\n\n","slug":"SpringBoot整合Swagger3生成接口文档","published":1,"updated":"2021-01-14T09:50:20.118Z","_id":"ckjwo81yi0003g8tu9az4aks5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前后端分离的项目，接口文档的存在十分重要。与手动编写接口文档不同，swagger是一个自动生成接口文档的工具，在需求不断变更的环境下，手动编写文档的效率实在太低。与swagger2相比新版的swagger3配置更少，使用更加方便。</p>\n<h2 id=\"一、pom文件中引入Swagger3依赖\"><a href=\"#一、pom文件中引入Swagger3依赖\" class=\"headerlink\" title=\"一、pom文件中引入Swagger3依赖\"></a>一、pom文件中引入Swagger3依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"二、Application上面加入-EnableOpenApi注解\"><a href=\"#二、Application上面加入-EnableOpenApi注解\" class=\"headerlink\" title=\"二、Application上面加入@EnableOpenApi注解\"></a>二、Application上面加入@EnableOpenApi注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableOpenApi</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(basePackages = &#123;&quot;cn.ruiyeclub.dao&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger3Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Swagger3Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"三、Swagger3Config的配置\"><a href=\"#三、Swagger3Config的配置\" class=\"headerlink\" title=\"三、Swagger3Config的配置\"></a>三、Swagger3Config的配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger3Config</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createRestApi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.OAS_30)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">&quot;Swagger3接口文档&quot;</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">&quot;更多请咨询服务开发者&quot;</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"四、Swagger注解的使用说明\"><a href=\"#四、Swagger注解的使用说明\" class=\"headerlink\" title=\"四、Swagger注解的使用说明\"></a>四、Swagger注解的使用说明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api</span>：用在请求的类上，表示对类的说明</span><br><span class=\"line\">    tags=<span class=\"string\">&quot;说明该类的作用，可以在UI界面上看到的注解&quot;</span></span><br><span class=\"line\">    value=<span class=\"string\">&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用</span><br><span class=\"line\">    value=<span class=\"string\">&quot;说明方法的用途、作用&quot;</span></span><br><span class=\"line\">    notes=<span class=\"string\">&quot;方法的备注说明&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>：用在<span class=\"meta\">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面</span><br><span class=\"line\">        name：参数名</span><br><span class=\"line\">        value：参数的汉字说明、解释</span><br><span class=\"line\">        required：参数是否必须传</span><br><span class=\"line\">        paramType：参数放在哪个地方</span><br><span class=\"line\">            · header --&gt; 请求参数的获取：<span class=\"meta\">@RequestHeader</span></span><br><span class=\"line\">            · query --&gt; 请求参数的获取：<span class=\"meta\">@RequestParam</span></span><br><span class=\"line\">            · path（用于restful接口）--&gt; 请求参数的获取：<span class=\"meta\">@PathVariable</span></span><br><span class=\"line\">            · div（不常用）</span><br><span class=\"line\">            · form（不常用）    </span><br><span class=\"line\">        dataType：参数类型，默认String，其它值dataType=<span class=\"string\">&quot;Integer&quot;</span>       </span><br><span class=\"line\">        defaultValue：参数的默认值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiResponses</span>：用在请求的方法上，表示一组响应</span><br><span class=\"line\">    <span class=\"meta\">@ApiResponse</span>：用在<span class=\"meta\">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br><span class=\"line\">        code：数字，例如<span class=\"number\">400</span></span><br><span class=\"line\">        message：信息，例如<span class=\"string\">&quot;请求参数没填好&quot;</span></span><br><span class=\"line\">        response：抛出异常的类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息</span><br><span class=\"line\">            （这种一般用在post创建的时候，使用<span class=\"meta\">@RequestBody</span>这样的场景，</span><br><span class=\"line\">            请求参数无法使用<span class=\"meta\">@ApiImplicitParam</span>注解进行描述的时候）</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>：用在属性上，描述响应类的属性</span><br></pre></td></tr></table></figure>\n\n\n<p>Controller层的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Api( tags = &quot;活动管理&quot; )</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/activity&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActivityService activityService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;获取活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.get(id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;删除活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">del</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.del(id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;添加活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">add</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> Activity activity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.add(activity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;修改活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upd&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">upd</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> Activity activity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.upd(activity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"五、访问地址\"><a href=\"#五、访问地址\" class=\"headerlink\" title=\"五、访问地址\"></a>五、访问地址</h2><ul>\n<li>Swagger的访问路径由port/swagger-ui.html 改成了 port/swagger-ui/ 或 <code>ip:port/swagger-ui/index.html</code></li>\n</ul>\n<p><a href=\"https://zhuanlan.zhihu.com/p/161947638\">https://zhuanlan.zhihu.com/p/161947638</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前后端分离的项目，接口文档的存在十分重要。与手动编写接口文档不同，swagger是一个自动生成接口文档的工具，在需求不断变更的环境下，手动编写文档的效率实在太低。与swagger2相比新版的swagger3配置更少，使用更加方便。</p>\n<h2 id=\"一、pom文件中引入Swagger3依赖\"><a href=\"#一、pom文件中引入Swagger3依赖\" class=\"headerlink\" title=\"一、pom文件中引入Swagger3依赖\"></a>一、pom文件中引入Swagger3依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"二、Application上面加入-EnableOpenApi注解\"><a href=\"#二、Application上面加入-EnableOpenApi注解\" class=\"headerlink\" title=\"二、Application上面加入@EnableOpenApi注解\"></a>二、Application上面加入@EnableOpenApi注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableOpenApi</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(basePackages = &#123;&quot;cn.ruiyeclub.dao&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger3Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Swagger3Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"三、Swagger3Config的配置\"><a href=\"#三、Swagger3Config的配置\" class=\"headerlink\" title=\"三、Swagger3Config的配置\"></a>三、Swagger3Config的配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger3Config</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createRestApi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.OAS_30)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">&quot;Swagger3接口文档&quot;</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">&quot;更多请咨询服务开发者&quot;</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"四、Swagger注解的使用说明\"><a href=\"#四、Swagger注解的使用说明\" class=\"headerlink\" title=\"四、Swagger注解的使用说明\"></a>四、Swagger注解的使用说明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api</span>：用在请求的类上，表示对类的说明</span><br><span class=\"line\">    tags=<span class=\"string\">&quot;说明该类的作用，可以在UI界面上看到的注解&quot;</span></span><br><span class=\"line\">    value=<span class=\"string\">&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用</span><br><span class=\"line\">    value=<span class=\"string\">&quot;说明方法的用途、作用&quot;</span></span><br><span class=\"line\">    notes=<span class=\"string\">&quot;方法的备注说明&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>：用在<span class=\"meta\">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面</span><br><span class=\"line\">        name：参数名</span><br><span class=\"line\">        value：参数的汉字说明、解释</span><br><span class=\"line\">        required：参数是否必须传</span><br><span class=\"line\">        paramType：参数放在哪个地方</span><br><span class=\"line\">            · header --&gt; 请求参数的获取：<span class=\"meta\">@RequestHeader</span></span><br><span class=\"line\">            · query --&gt; 请求参数的获取：<span class=\"meta\">@RequestParam</span></span><br><span class=\"line\">            · path（用于restful接口）--&gt; 请求参数的获取：<span class=\"meta\">@PathVariable</span></span><br><span class=\"line\">            · div（不常用）</span><br><span class=\"line\">            · form（不常用）    </span><br><span class=\"line\">        dataType：参数类型，默认String，其它值dataType=<span class=\"string\">&quot;Integer&quot;</span>       </span><br><span class=\"line\">        defaultValue：参数的默认值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiResponses</span>：用在请求的方法上，表示一组响应</span><br><span class=\"line\">    <span class=\"meta\">@ApiResponse</span>：用在<span class=\"meta\">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br><span class=\"line\">        code：数字，例如<span class=\"number\">400</span></span><br><span class=\"line\">        message：信息，例如<span class=\"string\">&quot;请求参数没填好&quot;</span></span><br><span class=\"line\">        response：抛出异常的类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息</span><br><span class=\"line\">            （这种一般用在post创建的时候，使用<span class=\"meta\">@RequestBody</span>这样的场景，</span><br><span class=\"line\">            请求参数无法使用<span class=\"meta\">@ApiImplicitParam</span>注解进行描述的时候）</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>：用在属性上，描述响应类的属性</span><br></pre></td></tr></table></figure>\n\n\n<p>Controller层的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Api( tags = &quot;活动管理&quot; )</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/activity&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActivityService activityService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;获取活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.get(id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;删除活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">del</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.del(id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;添加活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">add</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> Activity activity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.add(activity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;修改活动信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upd&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">upd</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> Activity activity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseUtils.success(activityService.upd(activity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"五、访问地址\"><a href=\"#五、访问地址\" class=\"headerlink\" title=\"五、访问地址\"></a>五、访问地址</h2><ul>\n<li>Swagger的访问路径由port/swagger-ui.html 改成了 port/swagger-ui/ 或 <code>ip:port/swagger-ui/index.html</code></li>\n</ul>\n<p><a href=\"https://zhuanlan.zhihu.com/p/161947638\">https://zhuanlan.zhihu.com/p/161947638</a></p>\n"},{"title":"Python中的单例模式的几种实现方式的及优化","_content":"\n\n\n## 单例模式\n\n**单例模式（Singleton Pattern）**是一种常用的软件设计模式，该模式的主要目的是确保**某一个类只有一个实例存在**。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。\n\n比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。\n\n在 Python 中，我们可以用多种方法来实现单例模式\n\n \n\n## 实现单例模式的几种方式\n\n### 1.使用模块\n\n其实，**Python 的模块就是天然的单例模式**，因为模块在第一次导入时，会生成 `.pyc` 文件，当第二次导入时，就会直接加载 `.pyc` 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n\n<!-- more -->\n\n**mysingleton.py**\n\n```python\nclass Singleton(object):\n    def foo(self):\n        pass\nsingleton = Singleton()\n```\n\n将上面的代码保存在文件 `mysingleton.py` 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象\n\n```python\nfrom a import singleton\n```\n\n \n\n### 2.使用装饰器\n\n\n\n```python\ndef Singleton(cls):\n    _instance = {}\n\n    def _singleton(*args, **kargs):\n        if cls not in _instance:\n            _instance[cls] = cls(*args, **kargs)\n        return _instance[cls]\n\n    return _singleton\n\n\n@Singleton\nclass A(object):\n    a = 1\n\n    def __init__(self, x=0):\n        self.x = x\n\n\na1 = A(2)\na2 = A(3)\n```\n\n\n\n \n\n \n\n### 3.使用类\n\n\n\n```python\nclass Singleton(object):\n\n    def __init__(self):\n        pass\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n```\n\n\n\n一般情况，大家以为这样就完成了单例模式，但是这样当使用多线程时会存在问题\n\n \n\n\n\n```python\nclass Singleton(object):\n\n    def __init__(self):\n        pass\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n\nimport threading\n\ndef task(arg):\n    obj = Singleton.instance()\n    print(obj)\n\nfor i in range(10):\n    t = threading.Thread(target=task,args=[i,])\n    t.start()\n```\n\n\n\n程序执行后，打印结果如下：\n\n\n\n```python\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n```\n\n\n\n看起来也没有问题，那是因为执行速度过快，如果在init方法中有一些IO操作，就会发现问题了，下面我们通过time.sleep模拟\n\n我们在上面__init__方法中加入以下代码：\n\n```python\n    def __init__(self):\n        import time\n        time.sleep(1)\n```\n\n重新执行程序后，结果如下\n\n\n\n```python\n<__main__.Singleton object at 0x034A3410>\n<__main__.Singleton object at 0x034BB990>\n<__main__.Singleton object at 0x034BB910>\n<__main__.Singleton object at 0x034ADED0>\n<__main__.Singleton object at 0x034E6BD0>\n<__main__.Singleton object at 0x034E6C10>\n<__main__.Singleton object at 0x034E6B90>\n<__main__.Singleton object at 0x034BBA30>\n<__main__.Singleton object at 0x034F6B90>\n<__main__.Singleton object at 0x034E6A90>\n```\n\n\n\n问题出现了！按照以上方式创建的单例，无法支持多线程\n\n \n\n解决办法：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低,但是保证了数据安全\n\n\n\n```python\nimport time\nimport threading\nclass Singleton(object):\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        time.sleep(1)\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        with Singleton._instance_lock:\n            if not hasattr(Singleton, \"_instance\"):\n                Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n\n\ndef task(arg):\n    obj = Singleton.instance()\n    print(obj)\nfor i in range(10):\n    t = threading.Thread(target=task,args=[i,])\n    t.start()\ntime.sleep(20)\nobj = Singleton.instance()\nprint(obj)\n```\n\n\n\n \n\n打印结果如下：\n\n\n\n```python\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n```\n\n\n\n这样就差不多了，但是还是有一点小问题，就是当程序执行时，执行了time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样不太好，再进行一些优化，把intance方法，改成下面的这样就行：\n\n\n\n```python\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n```\n\n\n\n这样，一个可以支持多线程的单例模式就完成了\n\n![img](https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif) 完整代码\n\n \n\n这种方式实现的单例模式，使用时会有限制，以后实例化必须通过 obj = Singleton.instance()\n\n如果用 obj=Singleton() ,这种方式得到的不是单例\n\n \n\n### 4.基于__new__方法实现（推荐使用，方便）\n\n通过上面例子，我们可以知道，当我们实现单例时，**为了保证线程安全需要在内部加入锁**\n\n我们知道，当我们实例化一个对象时，是**先执行了类的__new__方法**（我们没写时，默认调用object.__new__），**实例化对象**；然后**再执行类的__init__方法**，对这个对象进行初始化，所有我们可以基于这个，实现单例模式\n\n\n\n```python\nimport threading\nclass Singleton(object):\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        pass\n\n\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = object.__new__(cls)  \n        return Singleton._instance\n\nobj1 = Singleton()\nobj2 = Singleton()\nprint(obj1,obj2)\n\ndef task(arg):\n    obj = Singleton()\n    print(obj)\n\nfor i in range(10):\n    t = threading.Thread(target=task,args=[i,])\n    t.start()\n```\n\n\n\n打印结果如下：\n\n\n\n```python\n<__main__.Singleton object at 0x038B33D0> <__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n```\n\n\n\n \n\n采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton() \n\n \n\n### 5.基于metaclass方式实现\n\n#### 相关知识\n\n```python\n\"\"\"\n1.类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)\n2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法\n\"\"\"\n```\n\n例子：\n\n\n\n```python\nclass Foo:\n    def __init__(self):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        pass\n\nobj = Foo()\n# 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。\n\nobj()    # 执行Foo的 __call__ 方法    \n```\n\n\n\n \n\n**元类的使用**\n\n\n\n```python\nclass SingletonType(type):\n    def __init__(self,*args,**kwargs):\n        super(SingletonType,self).__init__(*args,**kwargs)\n\n    def __call__(cls, *args, **kwargs): # 这里的cls，即Foo类\n        print('cls',cls)\n        obj = cls.__new__(cls,*args, **kwargs)\n        cls.__init__(obj,*args, **kwargs) # Foo.__init__(obj)\n        return obj\n\nclass Foo(metaclass=SingletonType): # 指定创建Foo的type为SingletonType\n    def __init__(self，name):\n        self.name = name\n    def __new__(cls, *args, **kwargs):\n        return object.__new__(cls)\n\nobj = Foo('xx')\n```\n\n \n\n#### 实现单例模式\n\n```python\nimport threading\n\nclass SingletonType(type):\n    _instance_lock = threading.Lock()\n    def __call__(cls, *args, **kwargs):\n        if not hasattr(cls, \"_instance\"):\n            with SingletonType._instance_lock:\n                if not hasattr(cls, \"_instance\"):\n                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)\n        return cls._instance\n\nclass Foo(metaclass=SingletonType):\n    def __init__(self,name):\n        self.name = name\n\n\nobj1 = Foo('name')\nobj2 = Foo('name')\nprint(obj1,obj2)\n```","source":"_posts/python 单例模式.md","raw":"---\ntitle: Python中的单例模式的几种实现方式的及优化\n---\n\n\n\n## 单例模式\n\n**单例模式（Singleton Pattern）**是一种常用的软件设计模式，该模式的主要目的是确保**某一个类只有一个实例存在**。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。\n\n比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。\n\n在 Python 中，我们可以用多种方法来实现单例模式\n\n \n\n## 实现单例模式的几种方式\n\n### 1.使用模块\n\n其实，**Python 的模块就是天然的单例模式**，因为模块在第一次导入时，会生成 `.pyc` 文件，当第二次导入时，就会直接加载 `.pyc` 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n\n<!-- more -->\n\n**mysingleton.py**\n\n```python\nclass Singleton(object):\n    def foo(self):\n        pass\nsingleton = Singleton()\n```\n\n将上面的代码保存在文件 `mysingleton.py` 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象\n\n```python\nfrom a import singleton\n```\n\n \n\n### 2.使用装饰器\n\n\n\n```python\ndef Singleton(cls):\n    _instance = {}\n\n    def _singleton(*args, **kargs):\n        if cls not in _instance:\n            _instance[cls] = cls(*args, **kargs)\n        return _instance[cls]\n\n    return _singleton\n\n\n@Singleton\nclass A(object):\n    a = 1\n\n    def __init__(self, x=0):\n        self.x = x\n\n\na1 = A(2)\na2 = A(3)\n```\n\n\n\n \n\n \n\n### 3.使用类\n\n\n\n```python\nclass Singleton(object):\n\n    def __init__(self):\n        pass\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n```\n\n\n\n一般情况，大家以为这样就完成了单例模式，但是这样当使用多线程时会存在问题\n\n \n\n\n\n```python\nclass Singleton(object):\n\n    def __init__(self):\n        pass\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n\nimport threading\n\ndef task(arg):\n    obj = Singleton.instance()\n    print(obj)\n\nfor i in range(10):\n    t = threading.Thread(target=task,args=[i,])\n    t.start()\n```\n\n\n\n程序执行后，打印结果如下：\n\n\n\n```python\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n<__main__.Singleton object at 0x02C933D0>\n```\n\n\n\n看起来也没有问题，那是因为执行速度过快，如果在init方法中有一些IO操作，就会发现问题了，下面我们通过time.sleep模拟\n\n我们在上面__init__方法中加入以下代码：\n\n```python\n    def __init__(self):\n        import time\n        time.sleep(1)\n```\n\n重新执行程序后，结果如下\n\n\n\n```python\n<__main__.Singleton object at 0x034A3410>\n<__main__.Singleton object at 0x034BB990>\n<__main__.Singleton object at 0x034BB910>\n<__main__.Singleton object at 0x034ADED0>\n<__main__.Singleton object at 0x034E6BD0>\n<__main__.Singleton object at 0x034E6C10>\n<__main__.Singleton object at 0x034E6B90>\n<__main__.Singleton object at 0x034BBA30>\n<__main__.Singleton object at 0x034F6B90>\n<__main__.Singleton object at 0x034E6A90>\n```\n\n\n\n问题出现了！按照以上方式创建的单例，无法支持多线程\n\n \n\n解决办法：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低,但是保证了数据安全\n\n\n\n```python\nimport time\nimport threading\nclass Singleton(object):\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        time.sleep(1)\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        with Singleton._instance_lock:\n            if not hasattr(Singleton, \"_instance\"):\n                Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n\n\ndef task(arg):\n    obj = Singleton.instance()\n    print(obj)\nfor i in range(10):\n    t = threading.Thread(target=task,args=[i,])\n    t.start()\ntime.sleep(20)\nobj = Singleton.instance()\nprint(obj)\n```\n\n\n\n \n\n打印结果如下：\n\n\n\n```python\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n<__main__.Singleton object at 0x02D6B110>\n```\n\n\n\n这样就差不多了，但是还是有一点小问题，就是当程序执行时，执行了time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样不太好，再进行一些优化，把intance方法，改成下面的这样就行：\n\n\n\n```python\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n```\n\n\n\n这样，一个可以支持多线程的单例模式就完成了\n\n![img](https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif) 完整代码\n\n \n\n这种方式实现的单例模式，使用时会有限制，以后实例化必须通过 obj = Singleton.instance()\n\n如果用 obj=Singleton() ,这种方式得到的不是单例\n\n \n\n### 4.基于__new__方法实现（推荐使用，方便）\n\n通过上面例子，我们可以知道，当我们实现单例时，**为了保证线程安全需要在内部加入锁**\n\n我们知道，当我们实例化一个对象时，是**先执行了类的__new__方法**（我们没写时，默认调用object.__new__），**实例化对象**；然后**再执行类的__init__方法**，对这个对象进行初始化，所有我们可以基于这个，实现单例模式\n\n\n\n```python\nimport threading\nclass Singleton(object):\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        pass\n\n\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = object.__new__(cls)  \n        return Singleton._instance\n\nobj1 = Singleton()\nobj2 = Singleton()\nprint(obj1,obj2)\n\ndef task(arg):\n    obj = Singleton()\n    print(obj)\n\nfor i in range(10):\n    t = threading.Thread(target=task,args=[i,])\n    t.start()\n```\n\n\n\n打印结果如下：\n\n\n\n```python\n<__main__.Singleton object at 0x038B33D0> <__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n<__main__.Singleton object at 0x038B33D0>\n```\n\n\n\n \n\n采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton() \n\n \n\n### 5.基于metaclass方式实现\n\n#### 相关知识\n\n```python\n\"\"\"\n1.类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)\n2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法\n\"\"\"\n```\n\n例子：\n\n\n\n```python\nclass Foo:\n    def __init__(self):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        pass\n\nobj = Foo()\n# 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。\n\nobj()    # 执行Foo的 __call__ 方法    \n```\n\n\n\n \n\n**元类的使用**\n\n\n\n```python\nclass SingletonType(type):\n    def __init__(self,*args,**kwargs):\n        super(SingletonType,self).__init__(*args,**kwargs)\n\n    def __call__(cls, *args, **kwargs): # 这里的cls，即Foo类\n        print('cls',cls)\n        obj = cls.__new__(cls,*args, **kwargs)\n        cls.__init__(obj,*args, **kwargs) # Foo.__init__(obj)\n        return obj\n\nclass Foo(metaclass=SingletonType): # 指定创建Foo的type为SingletonType\n    def __init__(self，name):\n        self.name = name\n    def __new__(cls, *args, **kwargs):\n        return object.__new__(cls)\n\nobj = Foo('xx')\n```\n\n \n\n#### 实现单例模式\n\n```python\nimport threading\n\nclass SingletonType(type):\n    _instance_lock = threading.Lock()\n    def __call__(cls, *args, **kwargs):\n        if not hasattr(cls, \"_instance\"):\n            with SingletonType._instance_lock:\n                if not hasattr(cls, \"_instance\"):\n                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)\n        return cls._instance\n\nclass Foo(metaclass=SingletonType):\n    def __init__(self,name):\n        self.name = name\n\n\nobj1 = Foo('name')\nobj2 = Foo('name')\nprint(obj1,obj2)\n```","slug":"python 单例模式","published":1,"date":"2021-01-02T06:19:21.257Z","updated":"2021-01-05T05:51:59.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81yj0004g8tu33a6go83","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p><strong>单例模式（Singleton Pattern）</strong>是一种常用的软件设计模式，该模式的主要目的是确保<strong>某一个类只有一个实例存在</strong>。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p>\n<p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p>\n<p>在 Python 中，我们可以用多种方法来实现单例模式</p>\n<h2 id=\"实现单例模式的几种方式\"><a href=\"#实现单例模式的几种方式\" class=\"headerlink\" title=\"实现单例模式的几种方式\"></a>实现单例模式的几种方式</h2><h3 id=\"1-使用模块\"><a href=\"#1-使用模块\" class=\"headerlink\" title=\"1.使用模块\"></a>1.使用模块</h3><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>\n<a id=\"more\"></a>\n\n<p><strong>mysingleton.py</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">singleton = Singleton()</span><br></pre></td></tr></table></figure>\n<p>将上面的代码保存在文件 <code>mysingleton.py</code> 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> a <span class=\"keyword\">import</span> singleton</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-使用装饰器\"><a href=\"#2-使用装饰器\" class=\"headerlink\" title=\"2.使用装饰器\"></a>2.使用装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Singleton</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">    _instance = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_singleton</span>(<span class=\"params\">*args, **kargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> _instance:</span><br><span class=\"line\">            _instance[cls] = cls(*args, **kargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance[cls]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, x=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a1 = A(<span class=\"number\">2</span>)</span><br><span class=\"line\">a2 = A(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"3-使用类\"><a href=\"#3-使用类\" class=\"headerlink\" title=\"3.使用类\"></a>3.使用类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n\n<p>一般情况，大家以为这样就完成了单例模式，但是这样当使用多线程时会存在问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    obj = Singleton.instance()</span><br><span class=\"line\">    print(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task,args=[i,])</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n\n\n<p>程序执行后，打印结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>看起来也没有问题，那是因为执行速度过快，如果在init方法中有一些IO操作，就会发现问题了，下面我们通过time.sleep模拟</p>\n<p>我们在上面__init__方法中加入以下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>重新执行程序后，结果如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034A3410</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034BB990</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034BB910</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034ADED0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6BD0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6C10</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6B90</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034BBA30</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034F6B90</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6A90</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>问题出现了！按照以上方式创建的单例，无法支持多线程</p>\n<p>解决办法：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低,但是保证了数据安全</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    obj = Singleton.instance()</span><br><span class=\"line\">    print(obj)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task,args=[i,])</span><br><span class=\"line\">    t.start()</span><br><span class=\"line\">time.sleep(<span class=\"number\">20</span>)</span><br><span class=\"line\">obj = Singleton.instance()</span><br><span class=\"line\">print(obj)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>打印结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>这样就差不多了，但是还是有一点小问题，就是当程序执行时，执行了time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样不太好，再进行一些优化，把intance方法，改成下面的这样就行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n\n<p>这样，一个可以支持多线程的单例模式就完成了</p>\n<p><img src=\"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"img\"> 完整代码</p>\n<p>这种方式实现的单例模式，使用时会有限制，以后实例化必须通过 obj = Singleton.instance()</p>\n<p>如果用 obj=Singleton() ,这种方式得到的不是单例</p>\n<h3 id=\"4-基于-new-方法实现（推荐使用，方便）\"><a href=\"#4-基于-new-方法实现（推荐使用，方便）\" class=\"headerlink\" title=\"4.基于__new__方法实现（推荐使用，方便）\"></a>4.基于__new__方法实现（推荐使用，方便）</h3><p>通过上面例子，我们可以知道，当我们实现单例时，<strong>为了保证线程安全需要在内部加入锁</strong></p>\n<p>我们知道，当我们实例化一个对象时，是<strong>先执行了类的__new__方法</strong>（我们没写时，默认调用object.__new__），<strong>实例化对象</strong>；然后<strong>再执行类的__init__方法</strong>，对这个对象进行初始化，所有我们可以基于这个，实现单例模式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    Singleton._instance = <span class=\"built_in\">object</span>.__new__(cls)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = Singleton()</span><br><span class=\"line\">obj2 = Singleton()</span><br><span class=\"line\">print(obj1,obj2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    obj = Singleton()</span><br><span class=\"line\">    print(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task,args=[i,])</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n\n\n<p>打印结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt; &lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton() </p>\n<h3 id=\"5-基于metaclass方式实现\"><a href=\"#5-基于metaclass方式实现\" class=\"headerlink\" title=\"5.基于metaclass方式实现\"></a>5.基于metaclass方式实现</h3><h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">1.类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)</span></span><br><span class=\"line\"><span class=\"string\">2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj = Foo()</span><br><span class=\"line\"><span class=\"comment\"># 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj()    <span class=\"comment\"># 执行Foo的 __call__ 方法    </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>元类的使用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonType</span>(<span class=\"params\"><span class=\"built_in\">type</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args,**kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(SingletonType,self).__init__(*args,**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span> <span class=\"comment\"># 这里的cls，即Foo类</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;cls&#x27;</span>,cls)</span><br><span class=\"line\">        obj = cls.__new__(cls,*args, **kwargs)</span><br><span class=\"line\">        cls.__init__(obj,*args, **kwargs) <span class=\"comment\"># Foo.__init__(obj)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\">metaclass=SingletonType</span>):</span> <span class=\"comment\"># 指定创建Foo的type为SingletonType</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self，name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">object</span>.__new__(cls)</span><br><span class=\"line\"></span><br><span class=\"line\">obj = Foo(<span class=\"string\">&#x27;xx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"实现单例模式\"><a href=\"#实现单例模式\" class=\"headerlink\" title=\"实现单例模式\"></a>实现单例模式</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonType</span>(<span class=\"params\"><span class=\"built_in\">type</span></span>):</span></span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> SingletonType._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    cls._instance = <span class=\"built_in\">super</span>(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\">metaclass=SingletonType</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">obj2 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">print(obj1,obj2)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p><strong>单例模式（Singleton Pattern）</strong>是一种常用的软件设计模式，该模式的主要目的是确保<strong>某一个类只有一个实例存在</strong>。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p>\n<p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p>\n<p>在 Python 中，我们可以用多种方法来实现单例模式</p>\n<h2 id=\"实现单例模式的几种方式\"><a href=\"#实现单例模式的几种方式\" class=\"headerlink\" title=\"实现单例模式的几种方式\"></a>实现单例模式的几种方式</h2><h3 id=\"1-使用模块\"><a href=\"#1-使用模块\" class=\"headerlink\" title=\"1.使用模块\"></a>1.使用模块</h3><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>","more":"<p><strong>mysingleton.py</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">singleton = Singleton()</span><br></pre></td></tr></table></figure>\n<p>将上面的代码保存在文件 <code>mysingleton.py</code> 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> a <span class=\"keyword\">import</span> singleton</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-使用装饰器\"><a href=\"#2-使用装饰器\" class=\"headerlink\" title=\"2.使用装饰器\"></a>2.使用装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Singleton</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">    _instance = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_singleton</span>(<span class=\"params\">*args, **kargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> _instance:</span><br><span class=\"line\">            _instance[cls] = cls(*args, **kargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance[cls]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, x=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a1 = A(<span class=\"number\">2</span>)</span><br><span class=\"line\">a2 = A(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"3-使用类\"><a href=\"#3-使用类\" class=\"headerlink\" title=\"3.使用类\"></a>3.使用类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n\n<p>一般情况，大家以为这样就完成了单例模式，但是这样当使用多线程时会存在问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    obj = Singleton.instance()</span><br><span class=\"line\">    print(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task,args=[i,])</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n\n\n<p>程序执行后，打印结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02C933D0</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>看起来也没有问题，那是因为执行速度过快，如果在init方法中有一些IO操作，就会发现问题了，下面我们通过time.sleep模拟</p>\n<p>我们在上面__init__方法中加入以下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>重新执行程序后，结果如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034A3410</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034BB990</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034BB910</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034ADED0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6BD0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6C10</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6B90</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034BBA30</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034F6B90</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x034E6A90</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>问题出现了！按照以上方式创建的单例，无法支持多线程</p>\n<p>解决办法：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低,但是保证了数据安全</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    obj = Singleton.instance()</span><br><span class=\"line\">    print(obj)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task,args=[i,])</span><br><span class=\"line\">    t.start()</span><br><span class=\"line\">time.sleep(<span class=\"number\">20</span>)</span><br><span class=\"line\">obj = Singleton.instance()</span><br><span class=\"line\">print(obj)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>打印结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x02D6B110</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>这样就差不多了，但是还是有一点小问题，就是当程序执行时，执行了time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样不太好，再进行一些优化，把intance方法，改成下面的这样就行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n\n<p>这样，一个可以支持多线程的单例模式就完成了</p>\n<p><img src=\"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"img\"> 完整代码</p>\n<p>这种方式实现的单例模式，使用时会有限制，以后实例化必须通过 obj = Singleton.instance()</p>\n<p>如果用 obj=Singleton() ,这种方式得到的不是单例</p>\n<h3 id=\"4-基于-new-方法实现（推荐使用，方便）\"><a href=\"#4-基于-new-方法实现（推荐使用，方便）\" class=\"headerlink\" title=\"4.基于__new__方法实现（推荐使用，方便）\"></a>4.基于__new__方法实现（推荐使用，方便）</h3><p>通过上面例子，我们可以知道，当我们实现单例时，<strong>为了保证线程安全需要在内部加入锁</strong></p>\n<p>我们知道，当我们实例化一个对象时，是<strong>先执行了类的__new__方法</strong>（我们没写时，默认调用object.__new__），<strong>实例化对象</strong>；然后<strong>再执行类的__init__方法</strong>，对这个对象进行初始化，所有我们可以基于这个，实现单例模式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    Singleton._instance = <span class=\"built_in\">object</span>.__new__(cls)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = Singleton()</span><br><span class=\"line\">obj2 = Singleton()</span><br><span class=\"line\">print(obj1,obj2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    obj = Singleton()</span><br><span class=\"line\">    print(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task,args=[i,])</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n\n\n<p>打印结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt; &lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br><span class=\"line\">&lt;__main__.Singleton <span class=\"built_in\">object</span> at <span class=\"number\">0x038B33D0</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton() </p>\n<h3 id=\"5-基于metaclass方式实现\"><a href=\"#5-基于metaclass方式实现\" class=\"headerlink\" title=\"5.基于metaclass方式实现\"></a>5.基于metaclass方式实现</h3><h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">1.类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)</span></span><br><span class=\"line\"><span class=\"string\">2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj = Foo()</span><br><span class=\"line\"><span class=\"comment\"># 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj()    <span class=\"comment\"># 执行Foo的 __call__ 方法    </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>元类的使用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonType</span>(<span class=\"params\"><span class=\"built_in\">type</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args,**kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(SingletonType,self).__init__(*args,**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span> <span class=\"comment\"># 这里的cls，即Foo类</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;cls&#x27;</span>,cls)</span><br><span class=\"line\">        obj = cls.__new__(cls,*args, **kwargs)</span><br><span class=\"line\">        cls.__init__(obj,*args, **kwargs) <span class=\"comment\"># Foo.__init__(obj)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\">metaclass=SingletonType</span>):</span> <span class=\"comment\"># 指定创建Foo的type为SingletonType</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self，name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">object</span>.__new__(cls)</span><br><span class=\"line\"></span><br><span class=\"line\">obj = Foo(<span class=\"string\">&#x27;xx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"实现单例模式\"><a href=\"#实现单例模式\" class=\"headerlink\" title=\"实现单例模式\"></a>实现单例模式</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonType</span>(<span class=\"params\"><span class=\"built_in\">type</span></span>):</span></span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> SingletonType._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    cls._instance = <span class=\"built_in\">super</span>(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\">metaclass=SingletonType</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,name</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">obj2 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">print(obj1,obj2)</span><br></pre></td></tr></table></figure>"},{"title":"Spring boot","_content":"\n\n\n## 新建项目\n\n- 选中web项目\n- 选中mybatis、jdbc、mysql\n\n-   （redis,themeleaf）\n\n## 建立数据库\n\n- 因为数据库字段、索引对大小写是不敏感的，驼峰标识无意义；\n  所以一般采用数据库字段下划线， 实体类驼峰的命名方式\n\n## 项目引入yml文件\n<!-- more -->\n\n```yml\n\nspring:\n  datasource:\n    username: root\n    password: root\n    url: jdbc:mysql://localhost:3306/vue-admin?useUnicode=true&characterEncoding=UTF-8\n    driver-class-name: com.mysql.jdbc.Driver\n\n\n\n  thymeleaf:\n    servlet:\n      content-type: text/html\n    mode: LEGACYHTML5\n    cache: false\n    prefix: classpath:/templates/\n    \n    \nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**.xml\n  typeAliasesPackage: cn.allin.sdgreenfood.po\n```\n\n\n\n## 配置mapper扫描\n\n```java\n@MapperScan(\"cn.allin.huanshi.mapper\")\n@SpringBootApplication\npublic class HuanShiApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HuanShiApplication.class, args);\n    }\n\n}\n```\n\n\n\n## 配置mybatis-plus\n\n```xml\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.34</version>\n        </dependency>\n<!--记得配置mysql 的版本 不然容易报错-->\n\t\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.1.2</version>\n        </dependency>\n\n```\n\n\n\n## 配置shiro\n\n```java\n//MyShiroRealm.java\n\npackage cn.allin.huanshi.shiro;\n\n\nimport cn.allin.huanshi.domain.User;\nimport cn.allin.huanshi.mapper.UserMapper;\nimport cn.allin.huanshi.service.UserService;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n//实现AuthorizingRealm接口用户用户认证\npublic class MyShiroRealm extends AuthorizingRealm {\n\n    Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Autowired\n    UserService userService;\n\n    //角色权限\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        String name= (String) principalCollection.getPrimaryPrincipal();\n        User user = null;\n        try {\n            user = userService.getUserInfo(name);\n        } catch (Exception e) {\n            logger.info(\"授权失败！\");\n        }\n\n        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();\n        simpleAuthorizationInfo.addRole(user.getRole());\n\n        return simpleAuthorizationInfo;\n\n    }\n\n    //用户认证\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        //加这一步的目的是在Post请求的时候会先进认证，然后在到请求\n        if (authenticationToken.getPrincipal() == null) {\n            return null;\n        }\n        String userName = authenticationToken.getPrincipal().toString();\n\n        User user = userService.getUserInfo(userName);\n        if (user != null){\n            return new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());  //此处一定传用户名  否则会导致rememberMe 失效\n        }\n        return null;\n\n    }\n}\n```\n\n```java\n//MyFormAuthenticationFilter.java\n\n//ShiroConfig.java\n```\n\n\n\n\n\n","source":"_posts/spring-boot.md","raw":"---\ntitle: Spring boot\n---\n\n\n\n## 新建项目\n\n- 选中web项目\n- 选中mybatis、jdbc、mysql\n\n-   （redis,themeleaf）\n\n## 建立数据库\n\n- 因为数据库字段、索引对大小写是不敏感的，驼峰标识无意义；\n  所以一般采用数据库字段下划线， 实体类驼峰的命名方式\n\n## 项目引入yml文件\n<!-- more -->\n\n```yml\n\nspring:\n  datasource:\n    username: root\n    password: root\n    url: jdbc:mysql://localhost:3306/vue-admin?useUnicode=true&characterEncoding=UTF-8\n    driver-class-name: com.mysql.jdbc.Driver\n\n\n\n  thymeleaf:\n    servlet:\n      content-type: text/html\n    mode: LEGACYHTML5\n    cache: false\n    prefix: classpath:/templates/\n    \n    \nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**.xml\n  typeAliasesPackage: cn.allin.sdgreenfood.po\n```\n\n\n\n## 配置mapper扫描\n\n```java\n@MapperScan(\"cn.allin.huanshi.mapper\")\n@SpringBootApplication\npublic class HuanShiApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HuanShiApplication.class, args);\n    }\n\n}\n```\n\n\n\n## 配置mybatis-plus\n\n```xml\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.34</version>\n        </dependency>\n<!--记得配置mysql 的版本 不然容易报错-->\n\t\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.1.2</version>\n        </dependency>\n\n```\n\n\n\n## 配置shiro\n\n```java\n//MyShiroRealm.java\n\npackage cn.allin.huanshi.shiro;\n\n\nimport cn.allin.huanshi.domain.User;\nimport cn.allin.huanshi.mapper.UserMapper;\nimport cn.allin.huanshi.service.UserService;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n//实现AuthorizingRealm接口用户用户认证\npublic class MyShiroRealm extends AuthorizingRealm {\n\n    Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Autowired\n    UserService userService;\n\n    //角色权限\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        String name= (String) principalCollection.getPrimaryPrincipal();\n        User user = null;\n        try {\n            user = userService.getUserInfo(name);\n        } catch (Exception e) {\n            logger.info(\"授权失败！\");\n        }\n\n        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();\n        simpleAuthorizationInfo.addRole(user.getRole());\n\n        return simpleAuthorizationInfo;\n\n    }\n\n    //用户认证\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        //加这一步的目的是在Post请求的时候会先进认证，然后在到请求\n        if (authenticationToken.getPrincipal() == null) {\n            return null;\n        }\n        String userName = authenticationToken.getPrincipal().toString();\n\n        User user = userService.getUserInfo(userName);\n        if (user != null){\n            return new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());  //此处一定传用户名  否则会导致rememberMe 失效\n        }\n        return null;\n\n    }\n}\n```\n\n```java\n//MyFormAuthenticationFilter.java\n\n//ShiroConfig.java\n```\n\n\n\n\n\n","slug":"spring-boot","published":1,"date":"2021-01-01T10:47:30.411Z","updated":"2021-01-05T05:52:12.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81yk0005g8tuevkv5qgf","content":"<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><ul>\n<li><p>选中web项目</p>\n</li>\n<li><p>选中mybatis、jdbc、mysql</p>\n</li>\n<li><p>  （redis,themeleaf）</p>\n</li>\n</ul>\n<h2 id=\"建立数据库\"><a href=\"#建立数据库\" class=\"headerlink\" title=\"建立数据库\"></a>建立数据库</h2><ul>\n<li>因为数据库字段、索引对大小写是不敏感的，驼峰标识无意义；<br>所以一般采用数据库字段下划线， 实体类驼峰的命名方式</li>\n</ul>\n<h2 id=\"项目引入yml文件\"><a href=\"#项目引入yml文件\" class=\"headerlink\" title=\"项目引入yml文件\"></a>项目引入yml文件</h2><a id=\"more\"></a>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/vue-admin?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">thymeleaf:</span></span><br><span class=\"line\">    <span class=\"attr\">servlet:</span></span><br><span class=\"line\">      <span class=\"attr\">content-type:</span> <span class=\"string\">text/html</span></span><br><span class=\"line\">    <span class=\"attr\">mode:</span> <span class=\"string\">LEGACYHTML5</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">classpath:/templates/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath*:/mapper/**.xml</span></span><br><span class=\"line\">  <span class=\"attr\">typeAliasesPackage:</span> <span class=\"string\">cn.allin.sdgreenfood.po</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置mapper扫描\"><a href=\"#配置mapper扫描\" class=\"headerlink\" title=\"配置mapper扫描\"></a>配置mapper扫描</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;cn.allin.huanshi.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HuanShiApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HuanShiApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置mybatis-plus\"><a href=\"#配置mybatis-plus\" class=\"headerlink\" title=\"配置mybatis-plus\"></a>配置mybatis-plus</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.34<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--记得配置mysql 的版本 不然容易报错--&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置shiro\"><a href=\"#配置shiro\" class=\"headerlink\" title=\"配置shiro\"></a>配置shiro</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyShiroRealm.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.allin.huanshi.shiro;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.allin.huanshi.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.allin.huanshi.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.allin.huanshi.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现AuthorizingRealm接口用户用户认证</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyShiroRealm</span> <span class=\"keyword\">extends</span> <span class=\"title\">AuthorizingRealm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//角色权限</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class=\"line\">        String name= (String) principalCollection.getPrimaryPrincipal();</span><br><span class=\"line\">        User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            user = userService.getUserInfo(name);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;授权失败！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class=\"keyword\">new</span> SimpleAuthorizationInfo();</span><br><span class=\"line\">        simpleAuthorizationInfo.addRole(user.getRole());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> simpleAuthorizationInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用户认证</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationInfo <span class=\"title\">doGetAuthenticationInfo</span><span class=\"params\">(AuthenticationToken authenticationToken)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加这一步的目的是在Post请求的时候会先进认证，然后在到请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authenticationToken.getPrincipal() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String userName = authenticationToken.getPrincipal().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userService.getUserInfo(userName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());  <span class=\"comment\">//此处一定传用户名  否则会导致rememberMe 失效</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyFormAuthenticationFilter.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ShiroConfig.java</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><ul>\n<li><p>选中web项目</p>\n</li>\n<li><p>选中mybatis、jdbc、mysql</p>\n</li>\n<li><p>  （redis,themeleaf）</p>\n</li>\n</ul>\n<h2 id=\"建立数据库\"><a href=\"#建立数据库\" class=\"headerlink\" title=\"建立数据库\"></a>建立数据库</h2><ul>\n<li>因为数据库字段、索引对大小写是不敏感的，驼峰标识无意义；<br>所以一般采用数据库字段下划线， 实体类驼峰的命名方式</li>\n</ul>\n<h2 id=\"项目引入yml文件\"><a href=\"#项目引入yml文件\" class=\"headerlink\" title=\"项目引入yml文件\"></a>项目引入yml文件</h2>","more":"<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/vue-admin?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">thymeleaf:</span></span><br><span class=\"line\">    <span class=\"attr\">servlet:</span></span><br><span class=\"line\">      <span class=\"attr\">content-type:</span> <span class=\"string\">text/html</span></span><br><span class=\"line\">    <span class=\"attr\">mode:</span> <span class=\"string\">LEGACYHTML5</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">classpath:/templates/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath*:/mapper/**.xml</span></span><br><span class=\"line\">  <span class=\"attr\">typeAliasesPackage:</span> <span class=\"string\">cn.allin.sdgreenfood.po</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置mapper扫描\"><a href=\"#配置mapper扫描\" class=\"headerlink\" title=\"配置mapper扫描\"></a>配置mapper扫描</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;cn.allin.huanshi.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HuanShiApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HuanShiApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置mybatis-plus\"><a href=\"#配置mybatis-plus\" class=\"headerlink\" title=\"配置mybatis-plus\"></a>配置mybatis-plus</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.34<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--记得配置mysql 的版本 不然容易报错--&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置shiro\"><a href=\"#配置shiro\" class=\"headerlink\" title=\"配置shiro\"></a>配置shiro</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyShiroRealm.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.allin.huanshi.shiro;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.allin.huanshi.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.allin.huanshi.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.allin.huanshi.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现AuthorizingRealm接口用户用户认证</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyShiroRealm</span> <span class=\"keyword\">extends</span> <span class=\"title\">AuthorizingRealm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//角色权限</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class=\"line\">        String name= (String) principalCollection.getPrimaryPrincipal();</span><br><span class=\"line\">        User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            user = userService.getUserInfo(name);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;授权失败！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class=\"keyword\">new</span> SimpleAuthorizationInfo();</span><br><span class=\"line\">        simpleAuthorizationInfo.addRole(user.getRole());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> simpleAuthorizationInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用户认证</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationInfo <span class=\"title\">doGetAuthenticationInfo</span><span class=\"params\">(AuthenticationToken authenticationToken)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加这一步的目的是在Post请求的时候会先进认证，然后在到请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authenticationToken.getPrincipal() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String userName = authenticationToken.getPrincipal().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userService.getUserInfo(userName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());  <span class=\"comment\">//此处一定传用户名  否则会导致rememberMe 失效</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyFormAuthenticationFilter.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ShiroConfig.java</span></span><br></pre></td></tr></table></figure>"},{"title":"关于token使用的一些想法","_content":"\n\n\n\n\n## JSON WEB TOKEN\n\n>  https://www.jianshu.com/p/576dbf44b2ae \n\n\n\n### JWT长什么样？\n\nJWT是由三段信息构成的，将这三段信息文本用`.`链接一起就构成了Jwt字符串。就像这样:\n\n\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n### JWT的构成\n\n第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).\n<!-- more -->\n\n#### header\n\njwt的头部承载两部分信息：\n\n- 声明类型，这里是jwt\n- 声明加密的算法 通常直接使用 HMAC SHA256\n\n完整的头部就像下面这样的JSON：\n\n\n\n```bash\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.\n\n\n\n```undefined\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n#### payload\n\n载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分\n\n- 标准中注册的声明\n- 公共的声明\n- 私有的声明\n\n**标准中注册的声明** (建议但不强制使用) ：\n\n-  **iss**: jwt签发者\n-  **sub**: jwt所面向的用户\n-  **aud**: 接收jwt的一方\n-  **exp**: jwt的过期时间，这个过期时间必须要大于签发时间\n-  **nbf**: 定义在什么时间之前，该jwt都是不可用的.\n-  **iat**: jwt的签发时间\n-  **jti**: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n**公共的声明** ：\n 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.\n\n**私有的声明** ：\n 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n\n定义一个payload:\n\n\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\n\n然后将其进行base64加密，得到Jwt的第二部分。\n\n\n\n```undefined\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n#### signature\n\njwt的第三部分是一个签证信息，这个签证信息由三部分组成：\n\n- header (base64后的)\n- payload (base64后的)\n- secret\n\n这个部分需要base64加密后的header和base64加密后的payload使用`.`连接组成的字符串，然后通过header中声明的加密方式进行加盐`secret`组合加密，然后就构成了jwt的第三部分。\n\n\n\n```csharp\n// javascript\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\n\nvar signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n将这三部分用`.`连接成一个完整的字符串,构成了最终的jwt:\n\n\n\n```css\n  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n**注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。**\n\n#### 如何应用\n\n一般是在请求头里加入`Authorization`，并加上`Bearer`标注：\n\n\n\n```bash\nfetch('api/user/1', {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n})\n```\n\n服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的:\n\n![img](https:////upload-images.jianshu.io/upload_images/1821058-2e28fe6c997a60c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\njwt-diagram\n\n### 总结\n\n#### 优点\n\n- 因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。\n- 因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。\n- 便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。\n- 它不需要在服务端保存会话信息, 所以它易于应用的扩展\n\n#### 安全相关\n\n- 不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。\n- 保护好secret私钥，该私钥非常重要。\n- 如果可以，请使用https协议\n\n\n\n## 自制token\n\n其实，token只是服务器给客户端下发的一个用与验证身份的东西，那么，我们甚至可以用一段随机字符串代替。\n\n```java\n// 生成一段随机字符串\nString token=RandomStringUtils.randomAlphanumeric(16);\n\n// 将 token 做 key , 用户信息作为 value , 保存到 redis 中。\n// 设置时可以设置过期时间，用阿里当做token的过期时间\nredisUtil.setObejct(token, user， time);\n\n// 将token 返回给客户端。\n\n```\n\n```java\n// 当我们获取前端传递回来的token 就可以在redis 中获取用户信息。\n// 如没有该用户信息，说明用户未登陆或登陆过期\n\nUser user = (User) redisUtil.getObject(token, User.class);\nif (user == null) {\n\t// 用户未登陆或登录失效\n}\n\n\n```\n\n","source":"_posts/token.md","raw":"---\ntitle: 关于token使用的一些想法\n---\n\n\n\n\n\n## JSON WEB TOKEN\n\n>  https://www.jianshu.com/p/576dbf44b2ae \n\n\n\n### JWT长什么样？\n\nJWT是由三段信息构成的，将这三段信息文本用`.`链接一起就构成了Jwt字符串。就像这样:\n\n\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n### JWT的构成\n\n第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).\n<!-- more -->\n\n#### header\n\njwt的头部承载两部分信息：\n\n- 声明类型，这里是jwt\n- 声明加密的算法 通常直接使用 HMAC SHA256\n\n完整的头部就像下面这样的JSON：\n\n\n\n```bash\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.\n\n\n\n```undefined\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n#### payload\n\n载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分\n\n- 标准中注册的声明\n- 公共的声明\n- 私有的声明\n\n**标准中注册的声明** (建议但不强制使用) ：\n\n-  **iss**: jwt签发者\n-  **sub**: jwt所面向的用户\n-  **aud**: 接收jwt的一方\n-  **exp**: jwt的过期时间，这个过期时间必须要大于签发时间\n-  **nbf**: 定义在什么时间之前，该jwt都是不可用的.\n-  **iat**: jwt的签发时间\n-  **jti**: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n**公共的声明** ：\n 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.\n\n**私有的声明** ：\n 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n\n定义一个payload:\n\n\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\n\n然后将其进行base64加密，得到Jwt的第二部分。\n\n\n\n```undefined\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n#### signature\n\njwt的第三部分是一个签证信息，这个签证信息由三部分组成：\n\n- header (base64后的)\n- payload (base64后的)\n- secret\n\n这个部分需要base64加密后的header和base64加密后的payload使用`.`连接组成的字符串，然后通过header中声明的加密方式进行加盐`secret`组合加密，然后就构成了jwt的第三部分。\n\n\n\n```csharp\n// javascript\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\n\nvar signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n将这三部分用`.`连接成一个完整的字符串,构成了最终的jwt:\n\n\n\n```css\n  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n**注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。**\n\n#### 如何应用\n\n一般是在请求头里加入`Authorization`，并加上`Bearer`标注：\n\n\n\n```bash\nfetch('api/user/1', {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n})\n```\n\n服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的:\n\n![img](https:////upload-images.jianshu.io/upload_images/1821058-2e28fe6c997a60c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\njwt-diagram\n\n### 总结\n\n#### 优点\n\n- 因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。\n- 因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。\n- 便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。\n- 它不需要在服务端保存会话信息, 所以它易于应用的扩展\n\n#### 安全相关\n\n- 不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。\n- 保护好secret私钥，该私钥非常重要。\n- 如果可以，请使用https协议\n\n\n\n## 自制token\n\n其实，token只是服务器给客户端下发的一个用与验证身份的东西，那么，我们甚至可以用一段随机字符串代替。\n\n```java\n// 生成一段随机字符串\nString token=RandomStringUtils.randomAlphanumeric(16);\n\n// 将 token 做 key , 用户信息作为 value , 保存到 redis 中。\n// 设置时可以设置过期时间，用阿里当做token的过期时间\nredisUtil.setObejct(token, user， time);\n\n// 将token 返回给客户端。\n\n```\n\n```java\n// 当我们获取前端传递回来的token 就可以在redis 中获取用户信息。\n// 如没有该用户信息，说明用户未登陆或登陆过期\n\nUser user = (User) redisUtil.getObject(token, User.class);\nif (user == null) {\n\t// 用户未登陆或登录失效\n}\n\n\n```\n\n","slug":"token","published":1,"date":"2021-01-02T06:19:21.359Z","updated":"2021-01-05T05:52:22.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81yk0006g8tugyi18wqa","content":"<h2 id=\"JSON-WEB-TOKEN\"><a href=\"#JSON-WEB-TOKEN\" class=\"headerlink\" title=\"JSON WEB TOKEN\"></a>JSON WEB TOKEN</h2><blockquote>\n<p> <a href=\"https://www.jianshu.com/p/576dbf44b2ae\">https://www.jianshu.com/p/576dbf44b2ae</a> </p>\n</blockquote>\n<h3 id=\"JWT长什么样？\"><a href=\"#JWT长什么样？\" class=\"headerlink\" title=\"JWT长什么样？\"></a>JWT长什么样？</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n<h3 id=\"JWT的构成\"><a href=\"#JWT的构成\" class=\"headerlink\" title=\"JWT的构成\"></a>JWT的构成</h3><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>\n<a id=\"more\"></a>\n\n<h4 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h4><p>jwt的头部承载两部分信息：</p>\n<ul>\n<li>声明类型，这里是jwt</li>\n<li>声明加密的算法 通常直接使用 HMAC SHA256</li>\n</ul>\n<p>完整的头部就像下面这样的JSON：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;HS256&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>\n<h4 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h4><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p>\n<ul>\n<li>标准中注册的声明</li>\n<li>公共的声明</li>\n<li>私有的声明</li>\n</ul>\n<p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p>\n<ul>\n<li> <strong>iss</strong>: jwt签发者</li>\n<li> <strong>sub</strong>: jwt所面向的用户</li>\n<li> <strong>aud</strong>: 接收jwt的一方</li>\n<li> <strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li>\n<li> <strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li>\n<li> <strong>iat</strong>: jwt的签发时间</li>\n<li> <strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>\n</ul>\n<p><strong>公共的声明</strong> ：<br> 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p>\n<p><strong>私有的声明</strong> ：<br> 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<p>定义一个payload:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span>: <span class=\"string\">&quot;1234567890&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将其进行base64加密，得到Jwt的第二部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>\n<h4 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p>\n<ul>\n<li>header (base64后的)</li>\n<li>payload (base64后的)</li>\n<li>secret</li>\n</ul>\n<p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> encodedString = base64UrlEncode(header) + <span class=\"string\">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> signature = HMACSHA256(encodedString, <span class=\"string\">&#x27;secret&#x27;</span>); <span class=\"comment\">// TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure>\n<p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class=\"selector-class\">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class=\"selector-class\">.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></p>\n<h4 id=\"如何应用\"><a href=\"#如何应用\" class=\"headerlink\" title=\"如何应用\"></a>如何应用</h4><p>一般是在请求头里加入<code>Authorization</code>，并加上<code>Bearer</code>标注：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;api/user/1&#x27;</span>, &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer &#x27;</span> + token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1821058-2e28fe6c997a60c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>jwt-diagram</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li>\n<li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li>\n<li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</li>\n<li>它不需要在服务端保存会话信息, 所以它易于应用的扩展</li>\n</ul>\n<h4 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h4><ul>\n<li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。</li>\n<li>保护好secret私钥，该私钥非常重要。</li>\n<li>如果可以，请使用https协议</li>\n</ul>\n<h2 id=\"自制token\"><a href=\"#自制token\" class=\"headerlink\" title=\"自制token\"></a>自制token</h2><p>其实，token只是服务器给客户端下发的一个用与验证身份的东西，那么，我们甚至可以用一段随机字符串代替。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成一段随机字符串</span></span><br><span class=\"line\">String token=RandomStringUtils.randomAlphanumeric(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 token 做 key , 用户信息作为 value , 保存到 redis 中。</span></span><br><span class=\"line\"><span class=\"comment\">// 设置时可以设置过期时间，用阿里当做token的过期时间</span></span><br><span class=\"line\">redisUtil.setObejct(token, user， time);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将token 返回给客户端。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当我们获取前端传递回来的token 就可以在redis 中获取用户信息。</span></span><br><span class=\"line\"><span class=\"comment\">// 如没有该用户信息，说明用户未登陆或登陆过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">User user = (User) redisUtil.getObject(token, User.class);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 用户未登陆或登录失效</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"JSON-WEB-TOKEN\"><a href=\"#JSON-WEB-TOKEN\" class=\"headerlink\" title=\"JSON WEB TOKEN\"></a>JSON WEB TOKEN</h2><blockquote>\n<p> <a href=\"https://www.jianshu.com/p/576dbf44b2ae\">https://www.jianshu.com/p/576dbf44b2ae</a> </p>\n</blockquote>\n<h3 id=\"JWT长什么样？\"><a href=\"#JWT长什么样？\" class=\"headerlink\" title=\"JWT长什么样？\"></a>JWT长什么样？</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n<h3 id=\"JWT的构成\"><a href=\"#JWT的构成\" class=\"headerlink\" title=\"JWT的构成\"></a>JWT的构成</h3><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>","more":"<h4 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h4><p>jwt的头部承载两部分信息：</p>\n<ul>\n<li>声明类型，这里是jwt</li>\n<li>声明加密的算法 通常直接使用 HMAC SHA256</li>\n</ul>\n<p>完整的头部就像下面这样的JSON：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;HS256&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>\n<h4 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h4><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p>\n<ul>\n<li>标准中注册的声明</li>\n<li>公共的声明</li>\n<li>私有的声明</li>\n</ul>\n<p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p>\n<ul>\n<li> <strong>iss</strong>: jwt签发者</li>\n<li> <strong>sub</strong>: jwt所面向的用户</li>\n<li> <strong>aud</strong>: 接收jwt的一方</li>\n<li> <strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li>\n<li> <strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li>\n<li> <strong>iat</strong>: jwt的签发时间</li>\n<li> <strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>\n</ul>\n<p><strong>公共的声明</strong> ：<br> 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p>\n<p><strong>私有的声明</strong> ：<br> 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<p>定义一个payload:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span>: <span class=\"string\">&quot;1234567890&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将其进行base64加密，得到Jwt的第二部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>\n<h4 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p>\n<ul>\n<li>header (base64后的)</li>\n<li>payload (base64后的)</li>\n<li>secret</li>\n</ul>\n<p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> encodedString = base64UrlEncode(header) + <span class=\"string\">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> signature = HMACSHA256(encodedString, <span class=\"string\">&#x27;secret&#x27;</span>); <span class=\"comment\">// TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure>\n<p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class=\"selector-class\">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class=\"selector-class\">.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></p>\n<h4 id=\"如何应用\"><a href=\"#如何应用\" class=\"headerlink\" title=\"如何应用\"></a>如何应用</h4><p>一般是在请求头里加入<code>Authorization</code>，并加上<code>Bearer</code>标注：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;api/user/1&#x27;</span>, &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer &#x27;</span> + token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1821058-2e28fe6c997a60c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>jwt-diagram</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li>\n<li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li>\n<li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</li>\n<li>它不需要在服务端保存会话信息, 所以它易于应用的扩展</li>\n</ul>\n<h4 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h4><ul>\n<li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。</li>\n<li>保护好secret私钥，该私钥非常重要。</li>\n<li>如果可以，请使用https协议</li>\n</ul>\n<h2 id=\"自制token\"><a href=\"#自制token\" class=\"headerlink\" title=\"自制token\"></a>自制token</h2><p>其实，token只是服务器给客户端下发的一个用与验证身份的东西，那么，我们甚至可以用一段随机字符串代替。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成一段随机字符串</span></span><br><span class=\"line\">String token=RandomStringUtils.randomAlphanumeric(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 token 做 key , 用户信息作为 value , 保存到 redis 中。</span></span><br><span class=\"line\"><span class=\"comment\">// 设置时可以设置过期时间，用阿里当做token的过期时间</span></span><br><span class=\"line\">redisUtil.setObejct(token, user， time);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将token 返回给客户端。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当我们获取前端传递回来的token 就可以在redis 中获取用户信息。</span></span><br><span class=\"line\"><span class=\"comment\">// 如没有该用户信息，说明用户未登陆或登陆过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">User user = (User) redisUtil.getObject(token, User.class);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 用户未登陆或登录失效</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"vue 监听键盘回车事件","date":"2020-03-08T08:31:33.000Z","_content":"\n\n\n### 基本用法\n\n```html\n<!-- vue运行为v-on在监听键盘事件时，添加了特殊的键盘修饰符：13代表回车键 -->\n<input v-on:keyup.13=\"submit\">\n\n<!-- vue还非常贴心地给出了常用按键的别名，这样就不必去记keyCode ~ ~ -->\n<!-- 上面代码，还可以在这样写： -->\n\n<input v-on:keyup.enter=\"submit\">\n<input @keyup.enter=\"submit\">\n```\n\n\n\n### 按回车触发search() 方法\n\n```html\n<input @keyup.enter=\"search()\"></input>\n```\n\n\n\n### element组件使用\n\n<!-- more -->\n\n```html\n<!-- 如果用了封装组件的话，比如element，这个时候使用按键修饰符需要加上.native -->\n<el-input v-model=\"account\" placeholder=\"请输入账号\" @keyup.enter.native=\"search()\"></el-input>\n```\n\n\n\n### 常用键盘别名：\n\n- .enter\n- .tab\n- .delete (捕获 “删除” 和 “退格” 键)\n- .esc\n- .space 空格键\n- .up\n- .down\n- .left\n- .right\n\n\n\n#### 还有一些特殊或者组合按键：\n\n- .ctrl\n- .alt\n- .shift\n- .meta(window系统下是window键，mac下是command键)\n\n\n\n```html\n<!-- Alt + C : -->\n<input @keyup.alt.67=“doSth”>\n\n<!-- Ctrl + Click : -->\n<div @click.ctrl=\"doSth\">点我</div>\n```\n\n\n\n","source":"_posts/vue 监听键盘回车事件.md","raw":"---\ntitle: vue 监听键盘回车事件\ndate: 2020-03-08 16:31:33\n---\n\n\n\n### 基本用法\n\n```html\n<!-- vue运行为v-on在监听键盘事件时，添加了特殊的键盘修饰符：13代表回车键 -->\n<input v-on:keyup.13=\"submit\">\n\n<!-- vue还非常贴心地给出了常用按键的别名，这样就不必去记keyCode ~ ~ -->\n<!-- 上面代码，还可以在这样写： -->\n\n<input v-on:keyup.enter=\"submit\">\n<input @keyup.enter=\"submit\">\n```\n\n\n\n### 按回车触发search() 方法\n\n```html\n<input @keyup.enter=\"search()\"></input>\n```\n\n\n\n### element组件使用\n\n<!-- more -->\n\n```html\n<!-- 如果用了封装组件的话，比如element，这个时候使用按键修饰符需要加上.native -->\n<el-input v-model=\"account\" placeholder=\"请输入账号\" @keyup.enter.native=\"search()\"></el-input>\n```\n\n\n\n### 常用键盘别名：\n\n- .enter\n- .tab\n- .delete (捕获 “删除” 和 “退格” 键)\n- .esc\n- .space 空格键\n- .up\n- .down\n- .left\n- .right\n\n\n\n#### 还有一些特殊或者组合按键：\n\n- .ctrl\n- .alt\n- .shift\n- .meta(window系统下是window键，mac下是command键)\n\n\n\n```html\n<!-- Alt + C : -->\n<input @keyup.alt.67=“doSth”>\n\n<!-- Ctrl + Click : -->\n<div @click.ctrl=\"doSth\">点我</div>\n```\n\n\n\n","slug":"vue 监听键盘回车事件","published":1,"updated":"2021-01-05T06:37:23.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81yl0007g8tub4zr1gdd","content":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vue运行为v-on在监听键盘事件时，添加了特殊的键盘修饰符：13代表回车键 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vue还非常贴心地给出了常用按键的别名，这样就不必去记keyCode ~ ~ --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 上面代码，还可以在这样写： --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"按回车触发search-方法\"><a href=\"#按回车触发search-方法\" class=\"headerlink\" title=\"按回车触发search() 方法\"></a>按回车触发search() 方法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;search()&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"element组件使用\"><a href=\"#element组件使用\" class=\"headerlink\" title=\"element组件使用\"></a>element组件使用</h3><a id=\"more\"></a>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 如果用了封装组件的话，比如element，这个时候使用按键修饰符需要加上.native --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;account&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入账号&quot;</span> @<span class=\"attr\">keyup.enter.native</span>=<span class=\"string\">&quot;search()&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"常用键盘别名：\"><a href=\"#常用键盘别名：\" class=\"headerlink\" title=\"常用键盘别名：\"></a>常用键盘别名：</h3><ul>\n<li>.enter</li>\n<li>.tab</li>\n<li>.delete (捕获 “删除” 和 “退格” 键)</li>\n<li>.esc</li>\n<li>.space 空格键</li>\n<li>.up</li>\n<li>.down</li>\n<li>.left</li>\n<li>.right</li>\n</ul>\n<h4 id=\"还有一些特殊或者组合按键：\"><a href=\"#还有一些特殊或者组合按键：\" class=\"headerlink\" title=\"还有一些特殊或者组合按键：\"></a>还有一些特殊或者组合按键：</h4><ul>\n<li>.ctrl</li>\n<li>.alt</li>\n<li>.shift</li>\n<li>.meta(window系统下是window键，mac下是command键)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Alt + C : --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.alt.67</span>=<span class=\"string\">“doSth”</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Ctrl + Click : --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.ctrl</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vue运行为v-on在监听键盘事件时，添加了特殊的键盘修饰符：13代表回车键 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vue还非常贴心地给出了常用按键的别名，这样就不必去记keyCode ~ ~ --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 上面代码，还可以在这样写： --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"按回车触发search-方法\"><a href=\"#按回车触发search-方法\" class=\"headerlink\" title=\"按回车触发search() 方法\"></a>按回车触发search() 方法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;search()&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"element组件使用\"><a href=\"#element组件使用\" class=\"headerlink\" title=\"element组件使用\"></a>element组件使用</h3>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 如果用了封装组件的话，比如element，这个时候使用按键修饰符需要加上.native --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;account&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入账号&quot;</span> @<span class=\"attr\">keyup.enter.native</span>=<span class=\"string\">&quot;search()&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"常用键盘别名：\"><a href=\"#常用键盘别名：\" class=\"headerlink\" title=\"常用键盘别名：\"></a>常用键盘别名：</h3><ul>\n<li>.enter</li>\n<li>.tab</li>\n<li>.delete (捕获 “删除” 和 “退格” 键)</li>\n<li>.esc</li>\n<li>.space 空格键</li>\n<li>.up</li>\n<li>.down</li>\n<li>.left</li>\n<li>.right</li>\n</ul>\n<h4 id=\"还有一些特殊或者组合按键：\"><a href=\"#还有一些特殊或者组合按键：\" class=\"headerlink\" title=\"还有一些特殊或者组合按键：\"></a>还有一些特殊或者组合按键：</h4><ul>\n<li>.ctrl</li>\n<li>.alt</li>\n<li>.shift</li>\n<li>.meta(window系统下是window键，mac下是command键)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Alt + C : --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.alt.67</span>=<span class=\"string\">“doSth”</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Ctrl + Click : --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.ctrl</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"vue 刷新当前页面","date":"2020-05-07T16:00:00.000Z","_content":"\n\n\n> https://blog.csdn.net/qq_16772725/article/details/80467492\n> https://segmentfault.com/a/1190000017007631\n\n\n\n## 简答粗暴\n\n```js\n// 这两条都能实现，强制刷新页面\n\nlocation.reload()\nthis.$router.go(0)\n```\n\n\n\n## 移动到一个空白页\n\n```html\n//移动到一个空白页 再移动回来\n\nthis.$router.replace({path: \"/back\",  query: {url: '/thisUrl' }})\n\n<template>\n</template>\n\n<script>\n   export default {\n      data() {\n      },\n      mounted(){\n        var url = this.$route.query(\"url\")\n\t\tthis.$router.replace(url)\n      },\n  }\n</script>\n```\n\n\n\n## provide / inject 组合\n\n原理：允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效\n\n在`App.vue`,声明`reload`方法，控制`router-view`的显示或隐藏，从而控制页面的再次加载。\n\n```html\n<template>\n  <div id=\"app\">\n    <router-view v-if=\"isRouterAlive\"></router-view>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  provide () {\n    return {\n      reload: this.reload\n    }\n  },\n  data () {\n    return {\n      isRouterAlive: true\n    }\n  },\n  methods: {\n    reload () {\n      this.isRouterAlive = false\n      this.$nextTick(function () {\n        this.isRouterAlive = true\n      })\n    }\n  }\n}\n</script>\n```\n\n在需要用到刷新的页面。在页面注入`App.vue`组件提供（`provide`）的 `reload` 依赖，在逻辑完成之后（删除或添加…）,直接`this.reload()`调用，即可刷新当前页面。\n\n```html\n<template>\n</template>\n\n<script>\n   export default {\n      data() {\n      },\n      inject: [\"reload\"],\n      mounted(){\n\n      },\n       muthods(){\n           reload(){\n               this.reload()\n           }\n       }\n  }\n</script>\n```\n\n\n\n## 路由参数变化而页面不刷新\n\n假如我们当前的路由为 ` /goods?id=1`，跳转后的路由为 `/goods?id=2`，这时因为vue 的`组件复用`机制， vue 是不会刷新页面的，我们可以监听路由变化，主动重新获取数据\n\n```javascript\nwatch: {\n    $route (to, from) {\n\t\tthis.goodsId = this.$router.query.id \n        this.init()\n    }\n}\n\n// 当然，强制刷新也是可以实现的 \n```\n\n\n\n","source":"_posts/vue刷新页面.md","raw":"---\ntitle: vue 刷新当前页面\ndate: 2020-05-08\n---\n\n\n\n> https://blog.csdn.net/qq_16772725/article/details/80467492\n> https://segmentfault.com/a/1190000017007631\n\n\n\n## 简答粗暴\n\n```js\n// 这两条都能实现，强制刷新页面\n\nlocation.reload()\nthis.$router.go(0)\n```\n\n\n\n## 移动到一个空白页\n\n```html\n//移动到一个空白页 再移动回来\n\nthis.$router.replace({path: \"/back\",  query: {url: '/thisUrl' }})\n\n<template>\n</template>\n\n<script>\n   export default {\n      data() {\n      },\n      mounted(){\n        var url = this.$route.query(\"url\")\n\t\tthis.$router.replace(url)\n      },\n  }\n</script>\n```\n\n\n\n## provide / inject 组合\n\n原理：允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效\n\n在`App.vue`,声明`reload`方法，控制`router-view`的显示或隐藏，从而控制页面的再次加载。\n\n```html\n<template>\n  <div id=\"app\">\n    <router-view v-if=\"isRouterAlive\"></router-view>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  provide () {\n    return {\n      reload: this.reload\n    }\n  },\n  data () {\n    return {\n      isRouterAlive: true\n    }\n  },\n  methods: {\n    reload () {\n      this.isRouterAlive = false\n      this.$nextTick(function () {\n        this.isRouterAlive = true\n      })\n    }\n  }\n}\n</script>\n```\n\n在需要用到刷新的页面。在页面注入`App.vue`组件提供（`provide`）的 `reload` 依赖，在逻辑完成之后（删除或添加…）,直接`this.reload()`调用，即可刷新当前页面。\n\n```html\n<template>\n</template>\n\n<script>\n   export default {\n      data() {\n      },\n      inject: [\"reload\"],\n      mounted(){\n\n      },\n       muthods(){\n           reload(){\n               this.reload()\n           }\n       }\n  }\n</script>\n```\n\n\n\n## 路由参数变化而页面不刷新\n\n假如我们当前的路由为 ` /goods?id=1`，跳转后的路由为 `/goods?id=2`，这时因为vue 的`组件复用`机制， vue 是不会刷新页面的，我们可以监听路由变化，主动重新获取数据\n\n```javascript\nwatch: {\n    $route (to, from) {\n\t\tthis.goodsId = this.$router.query.id \n        this.init()\n    }\n}\n\n// 当然，强制刷新也是可以实现的 \n```\n\n\n\n","slug":"vue刷新页面","published":1,"updated":"2021-01-05T07:25:58.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81ym0008g8tu2zv18w8f","content":"<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_16772725/article/details/80467492\">https://blog.csdn.net/qq_16772725/article/details/80467492</a><br><a href=\"https://segmentfault.com/a/1190000017007631\">https://segmentfault.com/a/1190000017007631</a></p>\n</blockquote>\n<h2 id=\"简答粗暴\"><a href=\"#简答粗暴\" class=\"headerlink\" title=\"简答粗暴\"></a>简答粗暴</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这两条都能实现，强制刷新页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">location.reload()</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.go(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"移动到一个空白页\"><a href=\"#移动到一个空白页\" class=\"headerlink\" title=\"移动到一个空白页\"></a>移动到一个空白页</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//移动到一个空白页 再移动回来</span><br><span class=\"line\"></span><br><span class=\"line\">this.$router.replace(&#123;path: &quot;/back&quot;,  query: &#123;url: &#x27;/thisUrl&#x27; &#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> url = <span class=\"built_in\">this</span>.$route.query(<span class=\"string\">&quot;url&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.$router.replace(url)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"provide-inject-组合\"><a href=\"#provide-inject-组合\" class=\"headerlink\" title=\"provide / inject 组合\"></a>provide / inject 组合</h2><p>原理：允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</p>\n<p>在<code>App.vue</code>,声明<code>reload</code>方法，控制<code>router-view</code>的显示或隐藏，从而控制页面的再次加载。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isRouterAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">&#x27;App&#x27;</span>,</span></span><br><span class=\"line\">  provide () &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      reload: <span class=\"built_in\">this</span>.reload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      isRouterAlive: <span class=\"literal\">true</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reload () &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.isRouterAlive = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.isRouterAlive = <span class=\"literal\">true</span></span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在需要用到刷新的页面。在页面注入<code>App.vue</code>组件提供（<code>provide</code>）的 <code>reload</code> 依赖，在逻辑完成之后（删除或添加…）,直接<code>this.reload()</code>调用，即可刷新当前页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"javascript\">      inject: [<span class=\"string\">&quot;reload&quot;</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"function\"><span class=\"title\">muthods</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"function\"><span class=\"title\">reload</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"built_in\">this</span>.reload()</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"路由参数变化而页面不刷新\"><a href=\"#路由参数变化而页面不刷新\" class=\"headerlink\" title=\"路由参数变化而页面不刷新\"></a>路由参数变化而页面不刷新</h2><p>假如我们当前的路由为 <code> /goods?id=1</code>，跳转后的路由为 <code>/goods?id=2</code>，这时因为vue 的<code>组件复用</code>机制， vue 是不会刷新页面的，我们可以监听路由变化，主动重新获取数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    $route (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.goodsId = <span class=\"built_in\">this</span>.$router.query.id </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当然，强制刷新也是可以实现的 </span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_16772725/article/details/80467492\">https://blog.csdn.net/qq_16772725/article/details/80467492</a><br><a href=\"https://segmentfault.com/a/1190000017007631\">https://segmentfault.com/a/1190000017007631</a></p>\n</blockquote>\n<h2 id=\"简答粗暴\"><a href=\"#简答粗暴\" class=\"headerlink\" title=\"简答粗暴\"></a>简答粗暴</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这两条都能实现，强制刷新页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">location.reload()</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.go(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"移动到一个空白页\"><a href=\"#移动到一个空白页\" class=\"headerlink\" title=\"移动到一个空白页\"></a>移动到一个空白页</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//移动到一个空白页 再移动回来</span><br><span class=\"line\"></span><br><span class=\"line\">this.$router.replace(&#123;path: &quot;/back&quot;,  query: &#123;url: &#x27;/thisUrl&#x27; &#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> url = <span class=\"built_in\">this</span>.$route.query(<span class=\"string\">&quot;url&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.$router.replace(url)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"provide-inject-组合\"><a href=\"#provide-inject-组合\" class=\"headerlink\" title=\"provide / inject 组合\"></a>provide / inject 组合</h2><p>原理：允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</p>\n<p>在<code>App.vue</code>,声明<code>reload</code>方法，控制<code>router-view</code>的显示或隐藏，从而控制页面的再次加载。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isRouterAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">&#x27;App&#x27;</span>,</span></span><br><span class=\"line\">  provide () &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      reload: <span class=\"built_in\">this</span>.reload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      isRouterAlive: <span class=\"literal\">true</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reload () &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.isRouterAlive = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.isRouterAlive = <span class=\"literal\">true</span></span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在需要用到刷新的页面。在页面注入<code>App.vue</code>组件提供（<code>provide</code>）的 <code>reload</code> 依赖，在逻辑完成之后（删除或添加…）,直接<code>this.reload()</code>调用，即可刷新当前页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"javascript\">      inject: [<span class=\"string\">&quot;reload&quot;</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"function\"><span class=\"title\">muthods</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"function\"><span class=\"title\">reload</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"built_in\">this</span>.reload()</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"路由参数变化而页面不刷新\"><a href=\"#路由参数变化而页面不刷新\" class=\"headerlink\" title=\"路由参数变化而页面不刷新\"></a>路由参数变化而页面不刷新</h2><p>假如我们当前的路由为 <code> /goods?id=1</code>，跳转后的路由为 <code>/goods?id=2</code>，这时因为vue 的<code>组件复用</code>机制， vue 是不会刷新页面的，我们可以监听路由变化，主动重新获取数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    $route (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.goodsId = <span class=\"built_in\">this</span>.$router.query.id </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当然，强制刷新也是可以实现的 </span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"CSS 的一些常用操作","date":"2019-03-11T16:00:00.000Z","_content":"\n\n\n## span 小手\n\n```css\ncursor: pointer;\n```\n\n\n\n## 虚线边框\n\n```css\n  p{\n    border-bottom: 1px dashed  #ccc;\n  }\n```\n\n\n\n### span不换行\n\n```css\n  span{\n    white-space:nowrap;\n  }\n```\n\n<!-- more -->\n\n### span居中\n\n```css\nspan{\n   vertical-align:middle;\n}\n```\n\n\n\n## 圆角边框\n\n```css\nborder-radius: 10px;\n```\n\n\n\n## 强制生效\n\n```css\nmargin-bottom: 15px !important;\n```\n\n\n\n## 文字溢出隐藏\n\n```css\n#多行\ndiv {\n    width: 100px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 3; //行数\n    -webkit-box-orient: vertical;\n}\n\n#单行\ndiv {\n    width: 100px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;   \n}\n```\n\n\n\n## 鼠标悬停显示边框\n\n```css\n//js\n$(\".div\").hover( \n    function () {\n        $(this).addClass(\"hover\");\n    },\n    function () {\n        $(this).removeClass(\"hover\");\n});\n#css\n.hover{\n    border: 1px solid;\n}\n```\n\n\n\n## ajax\n\n```js\n$.ajax({\n    type: \"post\",\n    url: \"/updUser\",\n    dataType: \"json\",\n    data:{\n        id : $(\"#id\").text(),\n        username: $(\"#username\").val(),\n        phone: $(\"#phone\").val(),\n        address: $(\"#address\").val(),\n    },\n    success: function (data) {\n        if (data.code == 1) {\n            alert(\"成功\")\n        } else {\n            alert(data.message)\n        }\n    },\n    error: function () {\n        alert(\"发生错误\");\n    }\n})\n```\n\n\n\n## 隐藏元素\n\n```html\n<p hidden id=\"id\">3</p>\n```\n\n\n\n## span 文字上划线\n\n```css\nspan{\n\ttext-decoration: line-through;\n}    \n```\n\n\n\n## hover 伪类\n\n```css\n// 鼠标悬浮\nbutton:hover{\n\tcolor: red;\n}\n```\n\n\n\n## CSS border-style 属性\n\n```css\n\tborder-style:dotted solid double dashed; \n    // 上边框是点状\n    // 右边框是实线\n    // 下边框是双线\n    // 左边框是虚线\n```\n\n\n\n## 渐变色\n\n```css\nbackground: linear-gradient(to left, white, blue);\n```\n\n\n\n## 边框不占用宽度\n\n```css\n\tbox-sizing: border-box;\n```\n\n\n\n## 字体小于12px\n\n```css\n\ttransform: scale(0.9);\n```","source":"_posts/常用css.md","raw":"---\ntitle: CSS 的一些常用操作\ndate: 2019-03-012\n---\n\n\n\n## span 小手\n\n```css\ncursor: pointer;\n```\n\n\n\n## 虚线边框\n\n```css\n  p{\n    border-bottom: 1px dashed  #ccc;\n  }\n```\n\n\n\n### span不换行\n\n```css\n  span{\n    white-space:nowrap;\n  }\n```\n\n<!-- more -->\n\n### span居中\n\n```css\nspan{\n   vertical-align:middle;\n}\n```\n\n\n\n## 圆角边框\n\n```css\nborder-radius: 10px;\n```\n\n\n\n## 强制生效\n\n```css\nmargin-bottom: 15px !important;\n```\n\n\n\n## 文字溢出隐藏\n\n```css\n#多行\ndiv {\n    width: 100px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 3; //行数\n    -webkit-box-orient: vertical;\n}\n\n#单行\ndiv {\n    width: 100px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;   \n}\n```\n\n\n\n## 鼠标悬停显示边框\n\n```css\n//js\n$(\".div\").hover( \n    function () {\n        $(this).addClass(\"hover\");\n    },\n    function () {\n        $(this).removeClass(\"hover\");\n});\n#css\n.hover{\n    border: 1px solid;\n}\n```\n\n\n\n## ajax\n\n```js\n$.ajax({\n    type: \"post\",\n    url: \"/updUser\",\n    dataType: \"json\",\n    data:{\n        id : $(\"#id\").text(),\n        username: $(\"#username\").val(),\n        phone: $(\"#phone\").val(),\n        address: $(\"#address\").val(),\n    },\n    success: function (data) {\n        if (data.code == 1) {\n            alert(\"成功\")\n        } else {\n            alert(data.message)\n        }\n    },\n    error: function () {\n        alert(\"发生错误\");\n    }\n})\n```\n\n\n\n## 隐藏元素\n\n```html\n<p hidden id=\"id\">3</p>\n```\n\n\n\n## span 文字上划线\n\n```css\nspan{\n\ttext-decoration: line-through;\n}    \n```\n\n\n\n## hover 伪类\n\n```css\n// 鼠标悬浮\nbutton:hover{\n\tcolor: red;\n}\n```\n\n\n\n## CSS border-style 属性\n\n```css\n\tborder-style:dotted solid double dashed; \n    // 上边框是点状\n    // 右边框是实线\n    // 下边框是双线\n    // 左边框是虚线\n```\n\n\n\n## 渐变色\n\n```css\nbackground: linear-gradient(to left, white, blue);\n```\n\n\n\n## 边框不占用宽度\n\n```css\n\tbox-sizing: border-box;\n```\n\n\n\n## 字体小于12px\n\n```css\n\ttransform: scale(0.9);\n```","slug":"常用css","published":1,"updated":"2021-01-05T06:12:59.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjwo81yn0009g8tu4c4pg7un","content":"<h2 id=\"span-小手\"><a href=\"#span-小手\" class=\"headerlink\" title=\"span 小手\"></a>span 小手</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">cursor</span>: <span class=\"selector-tag\">pointer</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"虚线边框\"><a href=\"#虚线边框\" class=\"headerlink\" title=\"虚线边框\"></a>虚线边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> dashed  <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"span不换行\"><a href=\"#span不换行\" class=\"headerlink\" title=\"span不换行\"></a>span不换行</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h3 id=\"span居中\"><a href=\"#span居中\" class=\"headerlink\" title=\"span居中\"></a>span居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">   <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"圆角边框\"><a href=\"#圆角边框\" class=\"headerlink\" title=\"圆角边框\"></a>圆角边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: 10<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"强制生效\"><a href=\"#强制生效\" class=\"headerlink\" title=\"强制生效\"></a>强制生效</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">margin-bottom</span>: 15<span class=\"selector-tag\">px</span> !<span class=\"selector-tag\">important</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"文字溢出隐藏\"><a href=\"#文字溢出隐藏\" class=\"headerlink\" title=\"文字溢出隐藏\"></a>文字溢出隐藏</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#多行</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    -webkit-line-clamp: 3; //行数</span><br><span class=\"line\">    <span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#单行</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"鼠标悬停显示边框\"><a href=\"#鼠标悬停显示边框\" class=\"headerlink\" title=\"鼠标悬停显示边框\"></a>鼠标悬停显示边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//<span class=\"selector-tag\">js</span></span><br><span class=\"line\">$(&quot;.div&quot;).hover( </span><br><span class=\"line\">    <span class=\"selector-tag\">function</span> () &#123;</span><br><span class=\"line\">        $(this).addClass(&quot;hover&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"selector-tag\">function</span> () &#123;</span><br><span class=\"line\">        $(this).removeClass(&quot;hover&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"selector-id\">#css</span></span><br><span class=\"line\"><span class=\"selector-class\">.hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    url: <span class=\"string\">&quot;/updUser&quot;</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        id : $(<span class=\"string\">&quot;#id&quot;</span>).text(),</span><br><span class=\"line\">        username: $(<span class=\"string\">&quot;#username&quot;</span>).val(),</span><br><span class=\"line\">        phone: $(<span class=\"string\">&quot;#phone&quot;</span>).val(),</span><br><span class=\"line\">        address: $(<span class=\"string\">&quot;#address&quot;</span>).val(),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.code == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(data.message)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;发生错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"隐藏元素\"><a href=\"#隐藏元素\" class=\"headerlink\" title=\"隐藏元素\"></a>隐藏元素</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">hidden</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"span-文字上划线\"><a href=\"#span-文字上划线\" class=\"headerlink\" title=\"span 文字上划线\"></a>span 文字上划线</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"hover-伪类\"><a href=\"#hover-伪类\" class=\"headerlink\" title=\"hover 伪类\"></a>hover 伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 鼠标悬浮</span><br><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"CSS-border-style-属性\"><a href=\"#CSS-border-style-属性\" class=\"headerlink\" title=\"CSS border-style 属性\"></a>CSS border-style 属性</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-style</span><span class=\"selector-pseudo\">:dotted</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">double</span> <span class=\"selector-tag\">dashed</span>; </span><br><span class=\"line\">   // 上边框是点状</span><br><span class=\"line\">   // 右边框是实线</span><br><span class=\"line\">   // 下边框是双线</span><br><span class=\"line\">   // 左边框是虚线</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"渐变色\"><a href=\"#渐变色\" class=\"headerlink\" title=\"渐变色\"></a>渐变色</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">left</span>, <span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">blue</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"边框不占用宽度\"><a href=\"#边框不占用宽度\" class=\"headerlink\" title=\"边框不占用宽度\"></a>边框不占用宽度</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-sizing</span>: <span class=\"selector-tag\">border-box</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"字体小于12px\"><a href=\"#字体小于12px\" class=\"headerlink\" title=\"字体小于12px\"></a>字体小于12px</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scale</span>(0.9);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"span-小手\"><a href=\"#span-小手\" class=\"headerlink\" title=\"span 小手\"></a>span 小手</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">cursor</span>: <span class=\"selector-tag\">pointer</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"虚线边框\"><a href=\"#虚线边框\" class=\"headerlink\" title=\"虚线边框\"></a>虚线边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> dashed  <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"span不换行\"><a href=\"#span不换行\" class=\"headerlink\" title=\"span不换行\"></a>span不换行</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"span居中\"><a href=\"#span居中\" class=\"headerlink\" title=\"span居中\"></a>span居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">   <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"圆角边框\"><a href=\"#圆角边框\" class=\"headerlink\" title=\"圆角边框\"></a>圆角边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: 10<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"强制生效\"><a href=\"#强制生效\" class=\"headerlink\" title=\"强制生效\"></a>强制生效</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">margin-bottom</span>: 15<span class=\"selector-tag\">px</span> !<span class=\"selector-tag\">important</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"文字溢出隐藏\"><a href=\"#文字溢出隐藏\" class=\"headerlink\" title=\"文字溢出隐藏\"></a>文字溢出隐藏</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#多行</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    -webkit-line-clamp: 3; //行数</span><br><span class=\"line\">    <span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#单行</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"鼠标悬停显示边框\"><a href=\"#鼠标悬停显示边框\" class=\"headerlink\" title=\"鼠标悬停显示边框\"></a>鼠标悬停显示边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//<span class=\"selector-tag\">js</span></span><br><span class=\"line\">$(&quot;.div&quot;).hover( </span><br><span class=\"line\">    <span class=\"selector-tag\">function</span> () &#123;</span><br><span class=\"line\">        $(this).addClass(&quot;hover&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"selector-tag\">function</span> () &#123;</span><br><span class=\"line\">        $(this).removeClass(&quot;hover&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"selector-id\">#css</span></span><br><span class=\"line\"><span class=\"selector-class\">.hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    url: <span class=\"string\">&quot;/updUser&quot;</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        id : $(<span class=\"string\">&quot;#id&quot;</span>).text(),</span><br><span class=\"line\">        username: $(<span class=\"string\">&quot;#username&quot;</span>).val(),</span><br><span class=\"line\">        phone: $(<span class=\"string\">&quot;#phone&quot;</span>).val(),</span><br><span class=\"line\">        address: $(<span class=\"string\">&quot;#address&quot;</span>).val(),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.code == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(data.message)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;发生错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"隐藏元素\"><a href=\"#隐藏元素\" class=\"headerlink\" title=\"隐藏元素\"></a>隐藏元素</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">hidden</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"span-文字上划线\"><a href=\"#span-文字上划线\" class=\"headerlink\" title=\"span 文字上划线\"></a>span 文字上划线</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"hover-伪类\"><a href=\"#hover-伪类\" class=\"headerlink\" title=\"hover 伪类\"></a>hover 伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 鼠标悬浮</span><br><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"CSS-border-style-属性\"><a href=\"#CSS-border-style-属性\" class=\"headerlink\" title=\"CSS border-style 属性\"></a>CSS border-style 属性</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-style</span><span class=\"selector-pseudo\">:dotted</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">double</span> <span class=\"selector-tag\">dashed</span>; </span><br><span class=\"line\">   // 上边框是点状</span><br><span class=\"line\">   // 右边框是实线</span><br><span class=\"line\">   // 下边框是双线</span><br><span class=\"line\">   // 左边框是虚线</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"渐变色\"><a href=\"#渐变色\" class=\"headerlink\" title=\"渐变色\"></a>渐变色</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">left</span>, <span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">blue</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"边框不占用宽度\"><a href=\"#边框不占用宽度\" class=\"headerlink\" title=\"边框不占用宽度\"></a>边框不占用宽度</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-sizing</span>: <span class=\"selector-tag\">border-box</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"字体小于12px\"><a href=\"#字体小于12px\" class=\"headerlink\" title=\"字体小于12px\"></a>字体小于12px</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scale</span>(0.9);</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}