<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LINUX 将进程放入后台执行，SSH 断开导致进程结束</title>
      <link href="/blog/2021/09/29/nohup/"/>
      <url>/blog/2021/09/29/nohup/</url>
      
        <content type="html"><![CDATA[<h2 id="（NOHUP-SETSID-amp-DISOWN）"><a href="#（NOHUP-SETSID-amp-DISOWN）" class="headerlink" title="（NOHUP, SETSID, &amp;, DISOWN）"></a>（NOHUP, SETSID, &amp;, DISOWN）</h2><p>Linux 将进程放入后台执行，解决网络，ssh断开导致进程结束（nohup,  setsid,  &amp;, disown）</p><p>1、nohup 命令</p><p>我们知道，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程</p><p>nohup &amp; 命令并不能从根本上解决ssh断开问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 [root@Searchsvc1 go-mysql-elasticsearch]# nohup tail -f nohup.out &amp;</span><br><span class="line">2 [1] 21509</span><br></pre></td></tr></table></figure><p>pid所属的父id为：21476</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 [root@Searchsvc1 go-mysql-elasticsearch]# ps -ef |grep tail</span><br><span class="line">2 root     21509 21476 98 21:39 pts&#x2F;1    00:01:17 tail -f nohup.out</span><br><span class="line">3 root     21518 20971  0 21:40 pts&#x2F;0    00:00:00 grep tail</span><br></pre></td></tr></table></figure><p>通过 pstree  -p 查看线程树可知它属于ssh的一个子线程，所以关闭ssh的时候，会将其子线程hangup。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1   ├─sshd(1472)─┬─sshd(20967)───bash(20971)───pstree(21516)</span><br><span class="line">2         │            └─sshd(21472)───bash(21476)───tail(21509)</span><br></pre></td></tr></table></figure><p>2、 setsid 命令</p><p>我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid 就能帮助我们做到这一点。让我们先来看一下 setsid 的帮助信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 [root@Searchsvc1 go-mysql-elasticsearch]# setsid tail -f nohup.out </span><br><span class="line">2 [root@Searchsvc1 go-mysql-elasticsearch]# 2017&#x2F;11&#x2F;16 21:34:30 master.go:54: [info] save position (mysql-bin.000052, 98963482)</span><br><span class="line">3 2017&#x2F;11&#x2F;16 21:35:13 master.go:54: [info] save position (mysql-bin.000052, 98966359)</span><br><span class="line">setsid 命令会将结果信息输出到控制台，并没有从真正意义上将线程转向后台执行</span><br><span class="line">我们再来看下执行该命令后的进程的父pid:1 ,已经跟ssh已经没有关系了。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 init(1)─┬─abrtd(1572)</span><br><span class="line">2         ├─acpid(1363)</span><br><span class="line">3         ├─atd(1609)</span><br><span class="line">4     </span><br><span class="line">5         ├─sshd(1472)─┬─sshd(20967)───bash(20971)───pstree(21650)</span><br><span class="line">6         │            └─sshd(21472)───bash(21476)</span><br><span class="line">7         ├─tail(21645)</span><br></pre></td></tr></table></figure><p>这里还有一个关于 subshell 的小技巧。我们知道，将一个或多个命名包含在“()”中就能让这些命令在子 shell 中运行中，从而扩展出很多有趣的功能，我们现在要讨论的就是其中之一。当我们将”&amp;”也放入“()”内之后，我们就会发现所提交的作业并不在作业列表中，也就是说，是无法通过<code>jobs</code>来查看的。让我们来看看为什么这样就能躲过 HUP 信号的影响吧。</p><p>但用&amp;能将进程转向后台，但是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 ├─sshd(1472)─┬─sshd(20967)───bash(20971)───pstree(21662)</span><br><span class="line">2         │            └─sshd(21472)───bash(21476)───tail(21655)</span><br></pre></td></tr></table></figure><p>（）命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 [root@Searchsvc1 go-mysql-elasticsearch]# (tail -f nohup.out)</span><br><span class="line">2 2017&#x2F;11&#x2F;16 21:57:38 master.go:54: [info] save position (mysql-bin.000052, 99185120)</span><br><span class="line">1  ├─sshd(1472)─┬─sshd(20967)───bash(20971)───pstree(21664)</span><br><span class="line">2         │            └─sshd(21472)───bash(21476)───tail(21663)</span><br></pre></td></tr></table></figure><p>从上面可以看出&amp;,()都会将结果信息输出到控制台，而且转向后台的线程会因为ssh的关闭而影响，但是执行（tail -f nohup.out &amp;）却能改变结果，进程将不再属于ssh的子进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1         ├─sshd(1472)─┬─sshd(20967)───bash(20971)───pstree(21685)</span><br><span class="line">2         │            └─sshd(21472)───bash(21476)</span><br><span class="line">3         ├─tail(21683)</span><br></pre></td></tr></table></figure><p>4、disown命令</p><p>我们已经知道，如果事先在命令前加上 nohup 或者 setsid 就可以避免 HUP 信号的影响。但是如果我们未加任何处理就已经提交了命令，该如何补救才能让它避免 HUP 信号的影响呢？</p><ul><li>用<code>disown -h *jobspec*</code>来使某个作业忽略HUP信号。</li><li>用<code>disown -ah </code>来使所有的作业都忽略HUP信号。</li><li>用<code>disown -rh </code>来使正在运行的作业忽略HUP信号。</li></ul><p>需要注意的是，当使用过 disown 之后，会将把目标作业从作业列表中移除，我们将不能再使用<code>jobs</code>来查看它，但是依然能够用<code>ps -ef</code>查找到它。</p><p>5、screen 命令</p><ul><li>用<code>screen -dmS *session name*</code>来建立一个处于断开模式下的会话（并指定其会话名）。</li><li>用<code>screen -list </code>来列出所有会话。</li><li>用<code>screen -r *session name*</code>来重新连接指定会话。</li><li>用快捷键<code>CTRL-a d </code>来暂时断开当前会话。</li></ul><p>6、PS命令</p><p>在ps命令中，“-T”选项可以开启线程查看。下面的命令列出了由进程号为<pid>的进程创建的所有线程。</p><p> ps -T -p <pid></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 [root@Searchsvc1 go-mysql-elasticsearch]# ps -T -p 21813</span><br><span class="line">2   PID  SPID TTY          TIME CMD</span><br></pre></td></tr></table></figure><p>“SID”栏表示线程ID，而“CMD”栏则显示了线程名称。</p><p>7、 Top命令</p><p>top命令可以实时显示各个线程情况。要在top输出中开启线程查看，请调用top命令的“-H”选项，该选项会列出所有Linux线程。在top运行时，你也可以通过按“H”键将线程查看模式切换为开或关。</p><p>1、 top -H</p><p>2、要让top输出某个特定进程<pid>并检查该进程内运行的线程状况：top -H -p <pid>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL 优化</title>
      <link href="/blog/2021/08/16/sql%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2021/08/16/sql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</span><br><span class="line"></span><br><span class="line">2、应尽量避免在 where 子句中使用!&#x3D;或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</span><br><span class="line"></span><br><span class="line">3、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</span><br><span class="line">select id from t where num is null</span><br><span class="line">可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</span><br><span class="line">select id from t where num&#x3D;0</span><br><span class="line"></span><br><span class="line">4、应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</span><br><span class="line">select id from t where num&#x3D;10 or num&#x3D;20</span><br><span class="line">可以这样查询：</span><br><span class="line">select id from t where num&#x3D;10</span><br><span class="line">union all</span><br><span class="line">select id from t where num&#x3D;20</span><br><span class="line"></span><br><span class="line">5、下面的查询也将导致全表扫描：</span><br><span class="line">select id from t where name like ‘%abc%’</span><br><span class="line">若要提高效率，可以考虑全文检索。</span><br><span class="line"></span><br><span class="line">6、in 和 not in 也要慎用，否则会导致全表扫描，如：</span><br><span class="line">select id from t where num in(1,2,3)</span><br><span class="line">对于连续的数值，能用 between 就不要用 in 了：</span><br><span class="line">select id from t where num between 1 and 3</span><br><span class="line"></span><br><span class="line">7、如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</span><br><span class="line">select id from t where num&#x3D;@num</span><br><span class="line">可以改为强制查询使用索引：</span><br><span class="line">select id from t with(index(索引名)) where num&#x3D;@num</span><br><span class="line"></span><br><span class="line">8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</span><br><span class="line">select id from t where num&#x2F;2&#x3D;100</span><br><span class="line">应改为:</span><br><span class="line">select id from t where num&#x3D;100*2</span><br><span class="line"></span><br><span class="line">9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</span><br><span class="line">select id from t where substring(name,1,3)&#x3D;’abc’–name以abc开头的id</span><br><span class="line">select id from t where datediff(day,createdate,’2005-11-30′)&#x3D;0–‘2005-11-30’生成的id</span><br><span class="line">应改为:</span><br><span class="line">select id from t where name like ‘abc%’</span><br><span class="line">select id from t where createdate&gt;&#x3D;’2005-11-30′ and createdate&lt;‘2005-12-1’</span><br><span class="line"></span><br><span class="line">10、不要在 where 子句中的“&#x3D;”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</span><br><span class="line"></span><br><span class="line">11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</span><br><span class="line"></span><br><span class="line">12、不要写一些没有意义的查询，如需要生成一个空表结构：</span><br><span class="line">select col1,col2 into #t from t where 1&#x3D;0</span><br><span class="line">这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</span><br><span class="line">create table #t(…)</span><br><span class="line"></span><br><span class="line">13、很多时候用 exists 代替 in 是一个好的选择：</span><br><span class="line">select num from a where num in(select num from b)</span><br><span class="line">用下面的语句替换：</span><br><span class="line">select num from a where exists(select 1 from b where num&#x3D;a.num)</span><br><span class="line"></span><br><span class="line">14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</span><br><span class="line"></span><br><span class="line">15、索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</span><br><span class="line"></span><br><span class="line">16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</span><br><span class="line"></span><br><span class="line">17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</span><br><span class="line"></span><br><span class="line">18、尽可能的使用char&#x2F;nchar 代替 varchar&#x2F;nvarchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</span><br><span class="line"></span><br><span class="line">19、任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</span><br><span class="line"></span><br><span class="line">20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</span><br><span class="line"></span><br><span class="line">21、避免频繁创建和删除临时表，以减少系统表资源的消耗。</span><br><span class="line"></span><br><span class="line">22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</span><br><span class="line"></span><br><span class="line">23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</span><br><span class="line"></span><br><span class="line">24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</span><br><span class="line"></span><br><span class="line">25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</span><br><span class="line"></span><br><span class="line">26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</span><br><span class="line"></span><br><span class="line">27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</span><br><span class="line"></span><br><span class="line">28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</span><br><span class="line"></span><br><span class="line">29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</span><br><span class="line"></span><br><span class="line">30、尽量避免大事务操作，提高系统并发能力。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven 指定单个JAR 的 url</title>
      <link href="/blog/2021/06/09/maven%20%E6%8C%87%E5%AE%9Aurl/"/>
      <url>/blog/2021/06/09/maven%20%E6%8C%87%E5%AE%9Aurl/</url>
      
        <content type="html"><![CDATA[<p> 在不影响原来的配置的情况下，可以通过修改pom.xml文件，添加如下节点来修改URL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>repository.hibernate<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Hibernate jar<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.ibiblio.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 这样就可以更换URL 了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wsl2局域网连接</title>
      <link href="/blog/2021/04/28/wsl2%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9E%E6%8E%A5/"/>
      <url>/blog/2021/04/28/wsl2%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="wsl2局域网连接"><a href="#wsl2局域网连接" class="headerlink" title="wsl2局域网连接"></a>wsl2局域网连接</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加转发端口  powershell 管理员</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=port connectaddress=127.0.0.1 listenaddress=* protocol=tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已转发的端口</span></span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除转发端口</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=80 listenaddress=0.0.0.0 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意 写的是0.0.0.0删的时候也需要是0.0.0.0进行对应，不然会提示找不到文件</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序登录逻辑</title>
      <link href="/blog/2021/03/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91/"/>
      <url>/blog/2021/03/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<ol><li>小程序发起请求获取当前用户的 code (<code>通过 wx.login 接口获得临时登录凭证 code</code> ) </li><li>将 <code>code</code> 发送到后台服务进行登录逻辑。</li><li> 后台接受到请求后判断用户是否登录，若已登录，则直接返回<code>token</code></li><li>未登录则用<code>code</code> 取 <code>openid</code> ( <a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html">auth.code2Session</a> ), 用获取的<code>openid</code>在系统中查询是否存在用户</li><li>存在则用该用户登录，不存在则创建新用户并登录，然后返回 <code>token</code></li><li>小程序收到登录 token视为登录成功，开始请求用户信息 ( <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html">wx.getUserInfo(Object object)</a> ) </li><li>小程序将获取到的用户信息传输给后台，将后台用户信息进行同步</li><li>结束登录</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML画圆（太阳耀光效果）</title>
      <link href="/blog/2021/01/15/HTML%E7%94%BB%E5%9C%86%EF%BC%88%E5%A4%AA%E9%98%B3%E8%80%80%E5%85%89%E6%95%88%E6%9E%9C%EF%BC%89/"/>
      <url>/blog/2021/01/15/HTML%E7%94%BB%E5%9C%86%EF%BC%88%E5%A4%AA%E9%98%B3%E8%80%80%E5%85%89%E6%95%88%E6%9E%9C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>效果  自己改下颜色</li></ul><p><img src="http://file.ingrun.cn/Snipaste_2021-01-15_09-03-17.png" alt="Snipaste_2021-01-15_09-03-17.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>TweetShirt<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    canvas &#123;</span><br><span class="line">      border: 1px solid black;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&quot;previewButton&quot;</span>);</span></span><br><span class="line">      button.onclick = previewHandler;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">previewHandler</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tshirtCanvas&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> context = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line">        fillBackgroundColor(canvas, context);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> selectObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;shape&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> index = selectObj.selectedIndex;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> shape = selectObj[index].value;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断是方形还是圆形</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (shape == <span class="string">&quot;squares&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> squares = <span class="number">10</span>; squares &lt; <span class="number">12</span>; squares++) &#123;</span></span><br><span class="line">            drawSquare(canvas, context);</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape == <span class="string">&quot;circles&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> circles = <span class="number">0</span>; circles &lt; <span class="number">20</span>; circles++) &#123;</span></span><br><span class="line">            drawCircle(canvas, context);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">fillBackgroundColor</span>(<span class="params">canvas, context</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> selectObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;backgroundColor&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> index = selectObj.selectedIndex;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bgColor = selectObj.options[index].value;</span></span><br><span class="line">        context.fillStyle = bgColor;</span><br><span class="line">        context.fillRect(0, 0, canvas.width, canvas.height);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//封装方形</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">drawSquare</span>(<span class="params">canvas, context</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> w = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">40</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvas.width);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvas.height);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        context.fillStyle = <span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line">        context.fillRect(x, y, w, w);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//封装圆形</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">canvas, context</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> radius = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">40</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvas.width);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvas.height);</span></span><br><span class="line"></span><br><span class="line">        context.beginPath();</span><br><span class="line"><span class="javascript">        context.arc(x, y, radius, <span class="number">0</span>, degreesToRadians(<span class="number">360</span>), <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        context.fillStyle = <span class="string">&quot;rgba(0,0,0, 0.6)&quot;</span>;</span></span><br><span class="line">        context.fill();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">degreesToRadians</span>(<span class="params">degrees</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (degrees * <span class="built_in">Math</span>.PI) / <span class="number">180</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;tshirtCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please update your brower to use TweetShirt<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;backgroundColor&quot;</span>&gt;</span>Select background color:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;backgroundColor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;white&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>White<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;black&quot;</span>&gt;</span>Black<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;shape&quot;</span>&gt;</span>Circles or squares?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;shape&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;none&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>Neither<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;circles&quot;</span>&gt;</span>Circles<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;squares&quot;</span>&gt;</span>squares<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;previewButton&quot;</span> <span class="attr">id</span>=<span class="string">&quot;previewButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Preview&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger3生成接口文档</title>
      <link href="/blog/2021/01/14/SpringBoot%E6%95%B4%E5%90%88Swagger3%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/blog/2021/01/14/SpringBoot%E6%95%B4%E5%90%88Swagger3%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>前后端分离的项目，接口文档的存在十分重要。与手动编写接口文档不同，swagger是一个自动生成接口文档的工具，在需求不断变更的环境下，手动编写文档的效率实在太低。与swagger2相比新版的swagger3配置更少，使用更加方便。</p><h2 id="一、pom文件中引入Swagger3依赖"><a href="#一、pom文件中引入Swagger3依赖" class="headerlink" title="一、pom文件中引入Swagger3依赖"></a>一、pom文件中引入Swagger3依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、Application上面加入-EnableOpenApi注解"><a href="#二、Application上面加入-EnableOpenApi注解" class="headerlink" title="二、Application上面加入@EnableOpenApi注解"></a>二、Application上面加入@EnableOpenApi注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;cn.ruiyeclub.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger3Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Swagger3Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Swagger3Config的配置"><a href="#三、Swagger3Config的配置" class="headerlink" title="三、Swagger3Config的配置"></a>三、Swagger3Config的配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger3Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;Swagger3接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;更多请咨询服务开发者&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Swagger注解的使用说明"><a href="#四、Swagger注解的使用说明" class="headerlink" title="四、Swagger注解的使用说明"></a>四、Swagger注解的使用说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>：用在请求的类上，表示对类的说明</span><br><span class="line">    tags=<span class="string">&quot;说明该类的作用，可以在UI界面上看到的注解&quot;</span></span><br><span class="line">    value=<span class="string">&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用</span><br><span class="line">    value=<span class="string">&quot;说明方法的用途、作用&quot;</span></span><br><span class="line">    notes=<span class="string">&quot;方法的备注说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>：用在<span class="meta">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面</span><br><span class="line">        name：参数名</span><br><span class="line">        value：参数的汉字说明、解释</span><br><span class="line">        required：参数是否必须传</span><br><span class="line">        paramType：参数放在哪个地方</span><br><span class="line">            · header --&gt; 请求参数的获取：<span class="meta">@RequestHeader</span></span><br><span class="line">            · query --&gt; 请求参数的获取：<span class="meta">@RequestParam</span></span><br><span class="line">            · path（用于restful接口）--&gt; 请求参数的获取：<span class="meta">@PathVariable</span></span><br><span class="line">            · div（不常用）</span><br><span class="line">            · form（不常用）    </span><br><span class="line">        dataType：参数类型，默认String，其它值dataType=<span class="string">&quot;Integer&quot;</span>       </span><br><span class="line">        defaultValue：参数的默认值</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiResponses</span>：用在请求的方法上，表示一组响应</span><br><span class="line">    <span class="meta">@ApiResponse</span>：用在<span class="meta">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br><span class="line">        code：数字，例如<span class="number">400</span></span><br><span class="line">        message：信息，例如<span class="string">&quot;请求参数没填好&quot;</span></span><br><span class="line">        response：抛出异常的类</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息</span><br><span class="line">            （这种一般用在post创建的时候，使用<span class="meta">@RequestBody</span>这样的场景，</span><br><span class="line">            请求参数无法使用<span class="meta">@ApiImplicitParam</span>注解进行描述的时候）</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>：用在属性上，描述响应类的属性</span><br></pre></td></tr></table></figure><p>Controller层的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Api( tags = &quot;活动管理&quot; )</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/activity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ActivityService activityService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取活动信息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtils.success(activityService.get(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除活动信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">del</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtils.success(activityService.del(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加活动信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Activity activity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtils.success(activityService.add(activity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改活动信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upd&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">upd</span><span class="params">(<span class="meta">@RequestBody</span> Activity activity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtils.success(activityService.upd(activity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、访问地址"><a href="#五、访问地址" class="headerlink" title="五、访问地址"></a>五、访问地址</h2><ul><li>Swagger的访问路径由port/swagger-ui.html 改成了 port/swagger-ui/ 或 <code>ip:port/swagger-ui/index.html</code></li></ul><p><a href="https://zhuanlan.zhihu.com/p/161947638">https://zhuanlan.zhihu.com/p/161947638</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 yum方式安装MySQL5.7</title>
      <link href="/blog/2021/01/04/mysql5.7/"/>
      <url>/blog/2021/01/04/mysql5.7/</url>
      
        <content type="html"><![CDATA[<p>转载至博客：<a href="https://www.cnblogs.com/bigbrotherer/p/7241845.html">https://www.cnblogs.com/bigbrotherer/p/7241845.html</a></p><p>在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p><h3 id="1-下载并安装MySQL官方的-Yum-Repository"><a href="#1-下载并安装MySQL官方的-Yum-Repository" class="headerlink" title="1 下载并安装MySQL官方的 Yum Repository"></a>1 下载并安装MySQL官方的 Yum Repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure><p> 使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure><p> 之后就开始安装MySQL服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure><p> 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</p><p><img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726201927328-459165254.png" alt="img"></p><p>至此MySQL就安装完成了，然后是对MySQL的一些设置。</p><h3 id="2-MySQL数据库设置"><a href="#2-MySQL数据库设置" class="headerlink" title="2 MySQL数据库设置"></a>2 MySQL数据库设置</h3><p> 首先启动MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start  mysqld.service</span></span><br></pre></td></tr></table></figure><p> 查看MySQL运行状态，运行状态如图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status mysqld.service</span></span><br></pre></td></tr></table></figure><p><img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202441687-1168874203.png" alt="img"></p><p> 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure><p><img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202722796-1932560887.png" alt="img"></p><p> 如下命令进入数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure><p> 输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new password&#x27;</span>;</span><br></pre></td></tr></table></figure><p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错：</p><p><img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203136000-1398594667.png" alt="img"></p><p> 原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关：</p><p> <img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726203904812-1008115240.png" alt="img"></p><p> MySQL完整的初始密码规则可以通过如下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password_check_user_name    | OFF   |</span><br><span class="line">| validate_password_dictionary_file    |       |</span><br><span class="line">| validate_password_length             | 4     |</span><br><span class="line">| validate_password_mixed_case_count   | 1     |</span><br><span class="line">| validate_password_number_count       | 1     |</span><br><span class="line">| validate_password_policy             | LOW   |</span><br><span class="line">| validate_password_special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p> 密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validate_password_length = validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</span><br></pre></td></tr></table></figure><p>我的是已经修改过的，初始情况下第一个的值是ON，validate_password_length是8。可以通过如下命令修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure><p> 设置之后就是我上面查出来的那几个值了，此时密码就可以设置的很简单，例如1234之类的。到此数据库的密码设置就完成了。</p><p> 但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y remove mysql57-community-release-el7-10.noarch</span></span><br></pre></td></tr></table></figure><p> 此时才算真的完成了。</p><p>转载至博客：<a href="https://www.cnblogs.com/bigbrotherer/p/7241845.html">https://www.cnblogs.com/bigbrotherer/p/7241845.html</a></p><h1 id="CentOS7安装mysql5-7（yum）"><a href="#CentOS7安装mysql5-7（yum）" class="headerlink" title="CentOS7安装mysql5.7（yum）"></a>CentOS7安装mysql5.7（yum）</h1><p>安装环境：CentOS7 64位 ，安装MySQL5.7</p><h3 id="1、配置YUM源"><a href="#1、配置YUM源" class="headerlink" title="1、配置YUM源"></a>1、配置YUM源</h3><h4 id="在MySQL官网中下载YUM源rpm安装包：https-dev-mysql-com-downloads-repo-yum"><a href="#在MySQL官网中下载YUM源rpm安装包：https-dev-mysql-com-downloads-repo-yum" class="headerlink" title="在MySQL官网中下载YUM源rpm安装包：https://dev.mysql.com/downloads/repo/yum/"></a>在MySQL官网中下载YUM源rpm安装包：<a href="https://links.jianshu.com/go?to=https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="安装mysql源"><a href="#安装mysql源" class="headerlink" title="安装mysql源"></a>安装mysql源</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">localinstall</span> <span class="selector-tag">mysql57-community-release-el7-8</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><h4 id="检查mysql源是否安装成功"><a href="#检查mysql源是否安装成功" class="headerlink" title="检查mysql源是否安装成功"></a>检查mysql源是否安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13498144-df07bd235bf5bc35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="img"></p><h3 id="2、安装MySQL"><a href="#2、安装MySQL" class="headerlink" title="2、安装MySQL"></a>2、安装MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="3、启动MySQL服务"><a href="#3、启动MySQL服务" class="headerlink" title="3、启动MySQL服务"></a>3、启动MySQL服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h3 id="4、开机启动"><a href="#4、开机启动" class="headerlink" title="4、开机启动"></a>4、开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h3 id="5、修改root本地登录密码"><a href="#5、修改root本地登录密码" class="headerlink" title="5、修改root本地登录密码"></a>5、修改root本地登录密码</h3><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>=password(<span class="string">&#x27;password!&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13498144-c1957a4544ef2021.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/683/format/webp" alt="img"></p><h3 id="6、允许远程连接"><a href="#6、允许远程连接" class="headerlink" title="6、允许远程连接"></a>6、允许远程连接</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all <span class="keyword">on</span> *.* to root@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">with</span> grant option; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于token使用的一些想法</title>
      <link href="/blog/2021/01/02/token/"/>
      <url>/blog/2021/01/02/token/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON-WEB-TOKEN"><a href="#JSON-WEB-TOKEN" class="headerlink" title="JSON WEB TOKEN"></a>JSON WEB TOKEN</h2><blockquote><p> <a href="https://www.jianshu.com/p/576dbf44b2ae">https://www.jianshu.com/p/576dbf44b2ae</a> </p></blockquote><h3 id="JWT长什么样？"><a href="#JWT长什么样？" class="headerlink" title="JWT长什么样？"></a>JWT长什么样？</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure><h3 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h3><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p><a id="more"></a><h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><p>jwt的头部承载两部分信息：</p><ul><li>声明类型，这里是jwt</li><li>声明加密的算法 通常直接使用 HMAC SHA256</li></ul><p>完整的头部就像下面这样的JSON：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul><p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p><ul><li> <strong>iss</strong>: jwt签发者</li><li> <strong>sub</strong>: jwt所面向的用户</li><li> <strong>aud</strong>: 接收jwt的一方</li><li> <strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li> <strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li><li> <strong>iat</strong>: jwt的签发时间</li><li> <strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p><strong>公共的声明</strong> ：<br> 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p><strong>私有的声明</strong> ：<br> 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到Jwt的第二部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure><h4 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret</li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>); <span class="comment">// TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="selector-class">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class="selector-class">.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></p><h4 id="如何应用"><a href="#如何应用" class="headerlink" title="如何应用"></a>如何应用</h4><p>一般是在请求头里加入<code>Authorization</code>，并加上<code>Bearer</code>标注：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;api/user/1&#x27;</span>, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer &#x27;</span> + token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的:</p><p><img src="https://upload-images.jianshu.io/upload_images/1821058-2e28fe6c997a60c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>jwt-diagram</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li><li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li><li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</li><li>它不需要在服务端保存会话信息, 所以它易于应用的扩展</li></ul><h4 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h4><ul><li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。</li><li>保护好secret私钥，该私钥非常重要。</li><li>如果可以，请使用https协议</li></ul><h2 id="自制token"><a href="#自制token" class="headerlink" title="自制token"></a>自制token</h2><p>其实，token只是服务器给客户端下发的一个用与验证身份的东西，那么，我们甚至可以用一段随机字符串代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一段随机字符串</span></span><br><span class="line">String token=RandomStringUtils.randomAlphanumeric(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 token 做 key , 用户信息作为 value , 保存到 redis 中。</span></span><br><span class="line"><span class="comment">// 设置时可以设置过期时间，用阿里当做token的过期时间</span></span><br><span class="line">redisUtil.setObejct(token, user， time);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将token 返回给客户端。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们获取前端传递回来的token 就可以在redis 中获取用户信息。</span></span><br><span class="line"><span class="comment">// 如没有该用户信息，说明用户未登陆或登陆过期</span></span><br><span class="line"></span><br><span class="line">User user = (User) redisUtil.getObject(token, User.class);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 用户未登陆或登录失效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python中的单例模式的几种实现方式的及优化</title>
      <link href="/blog/2021/01/02/python%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2021/01/02/python%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>单例模式（Singleton Pattern）</strong>是一种常用的软件设计模式，该模式的主要目的是确保<strong>某一个类只有一个实例存在</strong>。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p><p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p><p>在 Python 中，我们可以用多种方法来实现单例模式</p><h2 id="实现单例模式的几种方式"><a href="#实现单例模式的几种方式" class="headerlink" title="实现单例模式的几种方式"></a>实现单例模式的几种方式</h2><h3 id="1-使用模块"><a href="#1-使用模块" class="headerlink" title="1.使用模块"></a>1.使用模块</h3><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p><a id="more"></a><p><strong>mysingleton.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">singleton = Singleton()</span><br></pre></td></tr></table></figure><p>将上面的代码保存在文件 <code>mysingleton.py</code> 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> singleton</span><br></pre></td></tr></table></figure><h3 id="2-使用装饰器"><a href="#2-使用装饰器" class="headerlink" title="2.使用装饰器"></a>2.使用装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span>(<span class="params">*args, **kargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instance:</span><br><span class="line">            _instance[cls] = cls(*args, **kargs)</span><br><span class="line">        <span class="keyword">return</span> _instance[cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x=<span class="number">0</span></span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = A(<span class="number">2</span>)</span><br><span class="line">a2 = A(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="3-使用类"><a href="#3-使用类" class="headerlink" title="3.使用类"></a>3.使用类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            Singleton._instance = Singleton(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br></pre></td></tr></table></figure><p>一般情况，大家以为这样就完成了单例模式，但是这样当使用多线程时会存在问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            Singleton._instance = Singleton(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">arg</span>):</span></span><br><span class="line">    obj = Singleton.instance()</span><br><span class="line">    print(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>程序执行后，打印结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02C933D0</span>&gt;</span><br></pre></td></tr></table></figure><p>看起来也没有问题，那是因为执行速度过快，如果在init方法中有一些IO操作，就会发现问题了，下面我们通过time.sleep模拟</p><p>我们在上面__init__方法中加入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>重新执行程序后，结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034A3410</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034BB990</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034BB910</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034ADED0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034E6BD0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034E6C10</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034E6B90</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034BBA30</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034F6B90</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x034E6A90</span>&gt;</span><br></pre></td></tr></table></figure><p>问题出现了！按照以上方式创建的单例，无法支持多线程</p><p>解决办法：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低,但是保证了数据安全</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                Singleton._instance = Singleton(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">arg</span>):</span></span><br><span class="line">    obj = Singleton.instance()</span><br><span class="line">    print(obj)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">obj = Singleton.instance()</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x02D6B110</span>&gt;</span><br></pre></td></tr></table></figure><p>这样就差不多了，但是还是有一点小问题，就是当程序执行时，执行了time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样不太好，再进行一些优化，把intance方法，改成下面的这样就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">instance</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">        <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                Singleton._instance = Singleton(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> Singleton._instance</span><br></pre></td></tr></table></figure><p>这样，一个可以支持多线程的单例模式就完成了</p><p><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="img"> 完整代码</p><p>这种方式实现的单例模式，使用时会有限制，以后实例化必须通过 obj = Singleton.instance()</p><p>如果用 obj=Singleton() ,这种方式得到的不是单例</p><h3 id="4-基于-new-方法实现（推荐使用，方便）"><a href="#4-基于-new-方法实现（推荐使用，方便）" class="headerlink" title="4.基于__new__方法实现（推荐使用，方便）"></a>4.基于__new__方法实现（推荐使用，方便）</h3><p>通过上面例子，我们可以知道，当我们实现单例时，<strong>为了保证线程安全需要在内部加入锁</strong></p><p>我们知道，当我们实例化一个对象时，是<strong>先执行了类的__new__方法</strong>（我们没写时，默认调用object.__new__），<strong>实例化对象</strong>；然后<strong>再执行类的__init__方法</strong>，对这个对象进行初始化，所有我们可以基于这个，实现单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                    Singleton._instance = <span class="built_in">object</span>.__new__(cls)  </span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line">obj1 = Singleton()</span><br><span class="line">obj2 = Singleton()</span><br><span class="line">print(obj1,obj2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">arg</span>):</span></span><br><span class="line">    obj = Singleton()</span><br><span class="line">    print(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt; &lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x038B33D0</span>&gt;</span><br></pre></td></tr></table></figure><p>采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton() </p><h3 id="5-基于metaclass方式实现"><a href="#5-基于metaclass方式实现" class="headerlink" title="5.基于metaclass方式实现"></a>5.基于metaclass方式实现</h3><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)</span></span><br><span class="line"><span class="string">2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="comment"># 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。</span></span><br><span class="line"></span><br><span class="line">obj()    <span class="comment"># 执行Foo的 __call__ 方法    </span></span><br></pre></td></tr></table></figure><p><strong>元类的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SingletonType,self).__init__(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span> <span class="comment"># 这里的cls，即Foo类</span></span><br><span class="line">        print(<span class="string">&#x27;cls&#x27;</span>,cls)</span><br><span class="line">        obj = cls.__new__(cls,*args, **kwargs)</span><br><span class="line">        cls.__init__(obj,*args, **kwargs) <span class="comment"># Foo.__init__(obj)</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">metaclass=SingletonType</span>):</span> <span class="comment"># 指定创建Foo的type为SingletonType</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self，name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">&#x27;xx&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            <span class="keyword">with</span> SingletonType._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                    cls._instance = <span class="built_in">super</span>(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">metaclass=SingletonType</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Foo(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">obj2 = Foo(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">print(obj1,obj2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot</title>
      <link href="/blog/2021/01/01/spring-boot/"/>
      <url>/blog/2021/01/01/spring-boot/</url>
      
        <content type="html"><![CDATA[<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><ul><li><p>选中web项目</p></li><li><p>选中mybatis、jdbc、mysql</p></li><li><p>  （redis,themeleaf）</p></li></ul><h2 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h2><ul><li>因为数据库字段、索引对大小写是不敏感的，驼峰标识无意义；<br>所以一般采用数据库字段下划线， 实体类驼峰的命名方式</li></ul><h2 id="项目引入yml文件"><a href="#项目引入yml文件" class="headerlink" title="项目引入yml文件"></a>项目引入yml文件</h2><a id="more"></a><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/vue-admin?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">cn.allin.sdgreenfood.po</span></span><br></pre></td></tr></table></figure><h2 id="配置mapper扫描"><a href="#配置mapper扫描" class="headerlink" title="配置mapper扫描"></a>配置mapper扫描</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.allin.huanshi.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuanShiApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HuanShiApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置mybatis-plus"><a href="#配置mybatis-plus" class="headerlink" title="配置mybatis-plus"></a>配置mybatis-plus</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--记得配置mysql 的版本 不然容易报错--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置shiro"><a href="#配置shiro" class="headerlink" title="配置shiro"></a>配置shiro</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyShiroRealm.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.allin.huanshi.shiro;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.allin.huanshi.domain.User;</span><br><span class="line"><span class="keyword">import</span> cn.allin.huanshi.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.allin.huanshi.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现AuthorizingRealm接口用户用户认证</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色权限</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        String name= (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = userService.getUserInfo(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;授权失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        simpleAuthorizationInfo.addRole(user.getRole());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//加这一步的目的是在Post请求的时候会先进认证，然后在到请求</span></span><br><span class="line">        <span class="keyword">if</span> (authenticationToken.getPrincipal() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String userName = authenticationToken.getPrincipal().toString();</span><br><span class="line"></span><br><span class="line">        User user = userService.getUserInfo(userName);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());  <span class="comment">//此处一定传用户名  否则会导致rememberMe 失效</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyFormAuthenticationFilter.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ShiroConfig.java</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 刷新当前页面</title>
      <link href="/blog/2020/05/08/vue%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/"/>
      <url>/blog/2020/05/08/vue%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/qq_16772725/article/details/80467492">https://blog.csdn.net/qq_16772725/article/details/80467492</a><br><a href="https://segmentfault.com/a/1190000017007631">https://segmentfault.com/a/1190000017007631</a></p></blockquote><h2 id="简答粗暴"><a href="#简答粗暴" class="headerlink" title="简答粗暴"></a>简答粗暴</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两条都能实现，强制刷新页面</span></span><br><span class="line"></span><br><span class="line">location.reload()</span><br><span class="line"><span class="built_in">this</span>.$router.go(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="移动到一个空白页"><a href="#移动到一个空白页" class="headerlink" title="移动到一个空白页"></a>移动到一个空白页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//移动到一个空白页 再移动回来</span><br><span class="line"></span><br><span class="line">this.$router.replace(&#123;path: &quot;/back&quot;,  query: &#123;url: &#x27;/thisUrl&#x27; &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> url = <span class="built_in">this</span>.$route.query(<span class="string">&quot;url&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.replace(url)</span></span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="provide-inject-组合"><a href="#provide-inject-组合" class="headerlink" title="provide / inject 组合"></a>provide / inject 组合</h2><p>原理：允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</p><p>在<code>App.vue</code>,声明<code>reload</code>方法，控制<code>router-view</code>的显示或隐藏，从而控制页面的再次加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;isRouterAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  provide () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      reload: <span class="built_in">this</span>.reload</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      isRouterAlive: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.isRouterAlive = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isRouterAlive = <span class="literal">true</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在需要用到刷新的页面。在页面注入<code>App.vue</code>组件提供（<code>provide</code>）的 <code>reload</code> 依赖，在逻辑完成之后（删除或添加…）,直接<code>this.reload()</code>调用，即可刷新当前页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      inject: [<span class="string">&quot;reload&quot;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">       <span class="function"><span class="title">muthods</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">reload</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="built_in">this</span>.reload()</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由参数变化而页面不刷新"><a href="#路由参数变化而页面不刷新" class="headerlink" title="路由参数变化而页面不刷新"></a>路由参数变化而页面不刷新</h2><p>假如我们当前的路由为 <code> /goods?id=1</code>，跳转后的路由为 <code>/goods?id=2</code>，这时因为vue 的<code>组件复用</code>机制， vue 是不会刷新页面的，我们可以监听路由变化，主动重新获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    $route (to, <span class="keyword">from</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.goodsId = <span class="built_in">this</span>.$router.query.id </span><br><span class="line">        <span class="built_in">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，强制刷新也是可以实现的 </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 监听键盘回车事件</title>
      <link href="/blog/2020/03/08/vue%20%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E5%9B%9E%E8%BD%A6%E4%BA%8B%E4%BB%B6/"/>
      <url>/blog/2020/03/08/vue%20%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E5%9B%9E%E8%BD%A6%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue运行为v-on在监听键盘事件时，添加了特殊的键盘修饰符：13代表回车键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue还非常贴心地给出了常用按键的别名，这样就不必去记keyCode ~ ~ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码，还可以在这样写： --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按回车触发search-方法"><a href="#按回车触发search-方法" class="headerlink" title="按回车触发search() 方法"></a>按回车触发search() 方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;search()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="element组件使用"><a href="#element组件使用" class="headerlink" title="element组件使用"></a>element组件使用</h3><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果用了封装组件的话，比如element，这个时候使用按键修饰符需要加上.native --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;account&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;search()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用键盘别名："><a href="#常用键盘别名：" class="headerlink" title="常用键盘别名："></a>常用键盘别名：</h3><ul><li>.enter</li><li>.tab</li><li>.delete (捕获 “删除” 和 “退格” 键)</li><li>.esc</li><li>.space 空格键</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h4 id="还有一些特殊或者组合按键："><a href="#还有一些特殊或者组合按键：" class="headerlink" title="还有一些特殊或者组合按键："></a>还有一些特殊或者组合按键：</h4><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta(window系统下是window键，mac下是command键)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + C : --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">“doSth”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click : --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSth&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS 的一些常用操作</title>
      <link href="/blog/2019/03/12/%E5%B8%B8%E7%94%A8css/"/>
      <url>/blog/2019/03/12/%E5%B8%B8%E7%94%A8css/</url>
      
        <content type="html"><![CDATA[<h2 id="span-小手"><a href="#span-小手" class="headerlink" title="span 小手"></a>span 小手</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;</span><br></pre></td></tr></table></figure><h2 id="虚线边框"><a href="#虚线边框" class="headerlink" title="虚线边框"></a>虚线边框</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed  <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="span不换行"><a href="#span不换行" class="headerlink" title="span不换行"></a>span不换行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="span居中"><a href="#span居中" class="headerlink" title="span居中"></a>span居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">   <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h2 id="强制生效"><a href="#强制生效" class="headerlink" title="强制生效"></a>强制生效</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-bottom</span>: 15<span class="selector-tag">px</span> !<span class="selector-tag">important</span>;</span><br></pre></td></tr></table></figure><h2 id="文字溢出隐藏"><a href="#文字溢出隐藏" class="headerlink" title="文字溢出隐藏"></a>文字溢出隐藏</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#多行</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: 3; //行数</span><br><span class="line">    <span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#单行</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="鼠标悬停显示边框"><a href="#鼠标悬停显示边框" class="headerlink" title="鼠标悬停显示边框"></a>鼠标悬停显示边框</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//<span class="selector-tag">js</span></span><br><span class="line">$(&quot;.div&quot;).hover( </span><br><span class="line">    <span class="selector-tag">function</span> () &#123;</span><br><span class="line">        $(this).addClass(&quot;hover&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="selector-tag">function</span> () &#123;</span><br><span class="line">        $(this).removeClass(&quot;hover&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="selector-id">#css</span></span><br><span class="line"><span class="selector-class">.hover</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;/updUser&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        id : $(<span class="string">&quot;#id&quot;</span>).text(),</span><br><span class="line">        username: $(<span class="string">&quot;#username&quot;</span>).val(),</span><br><span class="line">        phone: $(<span class="string">&quot;#phone&quot;</span>).val(),</span><br><span class="line">        address: $(<span class="string">&quot;#address&quot;</span>).val(),</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.code == <span class="number">1</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(data.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;发生错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">hidden</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="span-文字上划线"><a href="#span-文字上划线" class="headerlink" title="span 文字上划线"></a>span 文字上划线</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="hover-伪类"><a href="#hover-伪类" class="headerlink" title="hover 伪类"></a>hover 伪类</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标悬浮</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-border-style-属性"><a href="#CSS-border-style-属性" class="headerlink" title="CSS border-style 属性"></a>CSS border-style 属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-style</span><span class="selector-pseudo">:dotted</span> <span class="selector-tag">solid</span> <span class="selector-tag">double</span> <span class="selector-tag">dashed</span>; </span><br><span class="line">   // 上边框是点状</span><br><span class="line">   // 右边框是实线</span><br><span class="line">   // 下边框是双线</span><br><span class="line">   // 左边框是虚线</span><br></pre></td></tr></table></figure><h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">left</span>, <span class="selector-tag">white</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><h2 id="边框不占用宽度"><a href="#边框不占用宽度" class="headerlink" title="边框不占用宽度"></a>边框不占用宽度</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br></pre></td></tr></table></figure><h2 id="字体小于12px"><a href="#字体小于12px" class="headerlink" title="字体小于12px"></a>字体小于12px</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0.9);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 的一些常用操作</title>
      <link href="/blog/2019/03/12/JS%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2019/03/12/JS%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="查询符合条件的第一个元素"><a href="#查询符合条件的第一个元素" class="headerlink" title="查询符合条件的第一个元素"></a>查询符合条件的第一个元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">s.find(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">s.find(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// undefined   无符合条件</span></span><br><span class="line">s.findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// -1   无符合条件</span></span><br><span class="line">s.some(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">1</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">s.some(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// false  无符合条件</span></span><br><span class="line">s.findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">23</span>)</span><br><span class="line"><span class="comment">// 1   返回下标</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组，  并将返回值组合成新数组返回</span></span><br><span class="line"><span class="keyword">let</span> s = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">s.map(<span class="function"><span class="params">e</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(e); <span class="keyword">return</span> e+<span class="number">10</span>&#125; )</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">(<span class="number">3</span>) [<span class="number">11</span>, <span class="number">33</span>, <span class="number">14</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回符合条件的所有数据 并组成新数组</span></span><br><span class="line"><span class="keyword">let</span> s = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">s.filter( <span class="function"><span class="params">i</span> =&gt;</span> i &gt; <span class="number">1</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="number">23</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
